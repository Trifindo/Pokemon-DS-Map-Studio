
package formats.mapbin;

import editor.game.Game;
import editor.handler.MapEditorHandler;
import net.miginfocom.swing.*;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.font.TextAttribute;
import java.io.File;
import java.util.*;

/**
 * @author Trifindo
 */
public class ExportMapBinInfoDialog extends JDialog {

    private MapEditorHandler handler;

    private String binFolderPath;

    private Collection<Point> mapCoords;

    private Thread convertingThread;

    private static final Color GREEN = new Color(6, 176, 37);
    private static final Color ORANGE = new Color(255, 106, 0);
    private static final Color RED = Color.red;

    private enum ExportStatus {
        SUCCESS_STATUS("SUCCESSFULLY EXPORTED", GREEN),
        MISSING_BGS_STATUS("NOT EXPORTED (MISSING BGS FILE)", RED),
        MISSING_PER_STATUS("NOT EXPORTED (MISSING PER FILE)", RED),
        MISSING_BLD_STATUS("NOT EXPORTED (MISSING BLD FILE)", RED),
        MISSING_NSBMD_STATUS("NOT EXPORTED (MISSING NSBMD FILE)", RED),
        MISSING_BDHC_STATUS("NOT EXPORTED (MISSING BDHC FILE)", RED),
        NSBMD_CONVERSION_ERROR_STATUS("NOT EXPORTED (ERROR CONVERTING NSBMD)", RED),
        ERROR_SAVING_FILE_STATUS("NOT EXPORTED (ERROR SAVING FILE IN FOLDER)", RED),
        UNKNOWN_ERROR_STATUS("NOT CONVERTED (UNKNOWN ERROR)", RED),
        INTERRUPT_ERROR_STATUS("NOT CONVERTED (ERROR CONVERTING THE MODEL)", RED);

        public final String msg;
        public final Color color;

        ExportStatus(String msg, Color color) {
            this.msg = msg;
            this.color = color;
        }
    }

    /**
     * Creates new form ImdOutputInfoDialog
     */
    public ExportMapBinInfoDialog(Frame parent) {
        super(parent, true);
        initComponents();

        getRootPane().setDefaultButton(jbAccept);
        jbAccept.requestFocus();

        jTable1.getColumnModel().getColumn(0).setPreferredWidth(150);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(350);

        jTable1.getColumnModel().getColumn(1).setCellRenderer(new StatusColumnCellRenderer());

        jTable1.getSelectionModel().addListSelectionListener(event -> {
            int index = jTable1.getSelectedRow();
            updateView(index);
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new JPanel();
        jbAccept = new JButton();
        jPanel2 = new JPanel();
        jScrollPane1 = new JScrollPane();
        jTable1 = new JTable();
        jLabel1 = new JLabel();
        jProgressBar1 = new JProgressBar();
        jLabel2 = new JLabel();
        jlFilesProcessed = new JLabel();
        jLabel4 = new JLabel();
        jlFilesConverted = new JLabel();
        jLabel8 = new JLabel();
        jlFilesNotConverted = new JLabel();
        jLabel3 = new JLabel();
        jlStatus = new JLabel();
        jLabel5 = new JLabel();
        jlResult = new JLabel();

        //======== this ========
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Resulting Map Bin files info");
        setModal(true);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowActivated(WindowEvent e) {
                formWindowActivated(e);
            }
            @Override
            public void windowClosed(WindowEvent e) {
                formWindowClosed(e);
            }
        });
        Container contentPane = getContentPane();
        contentPane.setLayout(new MigLayout(
            "insets 5,hidemode 3,gap 5 5",
            // columns
            "[496,grow,fill]",
            // rows
            "[grow,fill]" +
            "[fill]"));

        //======== jPanel1 ========
        {
            jPanel1.setLayout(new FlowLayout());

            //---- jbAccept ----
            jbAccept.setText("OK");
            jbAccept.setEnabled(false);
            jbAccept.addActionListener(e -> jbAcceptActionPerformed(e));
            jPanel1.add(jbAccept);
        }
        contentPane.add(jPanel1, "cell 0 1");

        //======== jPanel2 ========
        {

            //======== jScrollPane1 ========
            {

                //---- jTable1 ----
                jTable1.setModel(new DefaultTableModel(
                    new Object[][] {
                    },
                    new String[] {
                        "Name", "Status"
                    }
                ) {
                    boolean[] columnEditable = new boolean[] {
                        false, false
                    };
                    @Override
                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return columnEditable[columnIndex];
                    }
                });
                jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                jScrollPane1.setViewportView(jTable1);
            }

            //---- jLabel1 ----
            jLabel1.setText("BIN exporting progress:");

            //---- jLabel2 ----
            jLabel2.setText("Files processed:");

            //---- jlFilesProcessed ----
            jlFilesProcessed.setFont(new Font("Tahoma", Font.BOLD, 11));
            jlFilesProcessed.setText("N/N");

            //---- jLabel4 ----
            jLabel4.setText("BIN files exported:");

            //---- jlFilesConverted ----
            jlFilesConverted.setFont(new Font("Tahoma", Font.BOLD, 11));
            jlFilesConverted.setText("N");

            //---- jLabel8 ----
            jLabel8.setText("Files not converted:");

            //---- jlFilesNotConverted ----
            jlFilesNotConverted.setFont(new Font("Tahoma", Font.BOLD, 11));
            jlFilesNotConverted.setText("N");

            //---- jLabel3 ----
            jLabel3.setText("Status:");

            //---- jlStatus ----
            jlStatus.setFont(new Font("Tahoma", Font.BOLD, 11));
            jlStatus.setText("Converting...");

            //---- jLabel5 ----
            jLabel5.setText("Result:");

            //---- jlResult ----
            jlResult.setFont(new Font("Tahoma", Font.BOLD, 12));
            jlResult.setText(" ");

            GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
            jPanel2.setLayout(jPanel2Layout);
            jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup()
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup()
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jlResult, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup()
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jlFilesConverted, GroupLayout.PREFERRED_SIZE, 44, GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jlFilesNotConverted, GroupLayout.PREFERRED_SIZE, 44, GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jlStatus, GroupLayout.PREFERRED_SIZE, 153, GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jlFilesProcessed, GroupLayout.PREFERRED_SIZE, 44, GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jProgressBar1, GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE))
                        .addContainerGap())
            );
            jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup()
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jProgressBar1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jlStatus))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jlFilesProcessed))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, GroupLayout.PREFERRED_SIZE, 14, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlFilesConverted))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8, GroupLayout.PREFERRED_SIZE, 14, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlFilesNotConverted))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jlResult))
                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );
        }
        contentPane.add(jPanel2, "cell 0 0");
        setSize(555, 430);
        setLocationRelativeTo(getOwner());
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        if (convertingThread == null) {
            convertingThread = new Thread(this::saveAllBins);
            convertingThread.start();
        }
    }//GEN-LAST:event_formWindowActivated

    private void formWindowClosed(WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        convertingThread.interrupt();
    }//GEN-LAST:event_formWindowClosed

    private void jbAcceptActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jbAcceptActionPerformed
        dispose();
    }//GEN-LAST:event_jbAcceptActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JPanel jPanel1;
    private JButton jbAccept;
    private JPanel jPanel2;
    private JScrollPane jScrollPane1;
    private JTable jTable1;
    private JLabel jLabel1;
    private JProgressBar jProgressBar1;
    private JLabel jLabel2;
    private JLabel jlFilesProcessed;
    private JLabel jLabel4;
    private JLabel jlFilesConverted;
    private JLabel jLabel8;
    private JLabel jlFilesNotConverted;
    private JLabel jLabel3;
    private JLabel jlStatus;
    private JLabel jLabel5;
    private JLabel jlResult;
    // End of variables declaration//GEN-END:variables

    public void init(MapEditorHandler handler, Collection<Point> mapCoords,
                     String binFolderPath) {
        this.handler = handler;
        this.mapCoords = mapCoords;
        this.binFolderPath = binFolderPath;
    }

    public void saveAllBins() {
        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();

        int nFilesProcessed = 0;
        int nFilesConverted = 0;
        int nFilesNotConverted = 0;
        for (Point p : mapCoords) {
            String mapName = handler.getMapMatrix().getMapName(p);
            ExportStatus exportStatus = ExportStatus.UNKNOWN_ERROR_STATUS;
            if (!Thread.currentThread().isInterrupted()) {
                try {
                    String savePath = binFolderPath + File.separator + mapName +".bin";

                    int game = handler.getGameIndex();
                    MapBin mapBin;
                    if(game < Game.PLATINUM){//DIAMOND, PEARL
                        mapBin = new MapBinDP(binFolderPath, mapName);
                    } else if(game < Game.HEART_GOLD){//PLATINUM
                        mapBin = new MapBinPt(binFolderPath, mapName);
                    }else {//HEART GOLD, SOUL SILVER
                        mapBin = new MapBinHGSS(binFolderPath, mapName);
                    }
                    try {
                        mapBin.saveToFile(savePath);
                        nFilesConverted++;
                        exportStatus = ExportStatus.SUCCESS_STATUS;
                    }catch(Exception ex){
                        nFilesNotConverted++;
                        exportStatus = ExportStatus.ERROR_SAVING_FILE_STATUS;
                    }
                } catch(MissingMapBinFileException ex){
                    nFilesNotConverted++;
                    switch (ex.missingFileCode){
                        case MissingMapBinFileException.MISSING_BGS:{
                            exportStatus = ExportStatus.MISSING_BGS_STATUS;
                            break;
                        }
                        case MissingMapBinFileException.MISSING_PER:{
                            exportStatus = ExportStatus.MISSING_PER_STATUS;
                            break;
                        }
                        case MissingMapBinFileException.MISSING_BLD:{
                            exportStatus = ExportStatus.MISSING_BLD_STATUS;
                            break;
                        }
                        case MissingMapBinFileException.MISSING_NSBMD:{
                            exportStatus = ExportStatus.MISSING_NSBMD_STATUS;
                            break;
                        }
                        case MissingMapBinFileException.MISSING_BDHC:{
                            exportStatus = ExportStatus.MISSING_BDHC_STATUS;
                            break;
                        }
                    }
                } catch(NsbmdConversionException ex){
                    nFilesNotConverted++;
                    exportStatus = ExportStatus.NSBMD_CONVERSION_ERROR_STATUS;
                }catch (Exception ex) {
                    nFilesNotConverted++;
                    exportStatus = ExportStatus.UNKNOWN_ERROR_STATUS;
                }

                if (nFilesConverted > 0) {
                    jlFilesConverted.setForeground(GREEN);
                }

                if (nFilesNotConverted > 0) {
                    jlFilesNotConverted.setForeground(RED);
                }

                if (nFilesNotConverted > 0) {
                    jlStatus.setForeground(RED);
                    jlStatus.setText("Finished with errors");

                    jlResult.setForeground(RED);
                    jlResult.setText(nFilesNotConverted + " Bin(s) could not be exported");
                } else {
                    jlStatus.setForeground(GREEN);
                    jlStatus.setText("Finished");

                    jlResult.setForeground(GREEN);
                    jlResult.setText("All the Binary files have been exported");
                }

                tableModel.addRow(new Object[]{
                        mapName + ".bin",
                        exportStatus
                });

                nFilesProcessed++;

                jlFilesProcessed.setText(nFilesProcessed + "/" + mapCoords.size());
                jlFilesConverted.setText(String.valueOf(nFilesConverted));
                jlFilesNotConverted.setText(String.valueOf(nFilesNotConverted));

                jProgressBar1.setValue((nFilesProcessed * 100) / mapCoords.size());
            }

        }
        jTable1.setRowSelectionInterval(0, 0);
        updateView(0);

        jbAccept.setEnabled(true);

        getRootPane().setDefaultButton(jbAccept);
        jbAccept.requestFocus();
    }

    public void updateView(int index) {

    }

    private class StatusColumnCellRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {

            //Cells are by default rendered as a JLabel.
            JLabel l = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);

            ExportStatus status = (ExportStatus) value;
            l.setForeground(status.color);
            l.setText(status.msg);

            Font font = l.getFont();
            font = font.deriveFont(Collections.singletonMap(TextAttribute.WEIGHT, TextAttribute.WEIGHT_BOLD));
            l.setFont(font);

            setHorizontalAlignment(JLabel.CENTER);

            //Return the JLabel which renders the cell.
            return l;
        }
    }
}
