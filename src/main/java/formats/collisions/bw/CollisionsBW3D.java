package formats.collisions.bw;

import editor.game.Game;
import utils.BinaryArrayReader;
import utils.BinaryArrayWriter;
import utils.Utils;

import java.io.File;
import java.nio.file.Files;
import java.util.stream.IntStream;

public class CollisionsBW3D {

    private static final float[][] distances = {
            {
                    0.0f, -1.500351f, 1.4145508f, -9.901901f, -1.0002289f, -8.322525f, 4.2436676f, 3.5363922f, -4.993515f, 0.7072754f, 7.0727844f, -11.316467f, -2.1218262f, -2.236618f, 1.0002289f, 1.7892761f,
                    0.89463806f, 0.4473114f, -1.3419647f, -4.473221f, 2.0417328f, 0.80197144f, 1.6333771f, -4.025894f, -0.5001068f, 1.3870697f, 0.5548248f, 1.6039429f, 0.8166809f, 0.40834045f, 2.6839294f, 2.858429f,
                    2.4500732f, 2.6672974f, 1.6644897f, 2.000473f, 0.8322449f, 2.4059296f, -0.89463806f, 2.1385956f, 2.236618f, 1.3366241f, 2.333908f, 1.6670532f, -3.131256f, 4.025894f, -1.7892761f, -1.4145508f,
                    3.131256f, -6.262512f, 4.473221f, 14.003403f, -3.5785828f, 11.316467f, 8.48735f, -9.391998f, -6.365509f, 10.609177f, 9.901901f, -5.6582336f, -8.48735f, -4.920532f, -5.367874f, -7.78006f,
                    -9.800354f, -5.8151855f, -6.709839f, -3.6751251f, 6.365509f, 2.8291168f, -1.6333771f, -2.8291168f, 5.6582336f, 2.1218262f, -2.0417328f, -4.2436676f, 4.950943f, 0.9358978f, 1.7470093f, 0.43675232f,
                    1.0627441f, 1.2478638f, 6.560623f, 6.2025604f, 5.8772125f, -0.5615387f, 0.87350464f, -0.6863251f, 0.5615387f, 0.0625f, -0.37435913f, 0.6863251f, 0.74871826f, -0.74871826f, 0.37435913f, -0.18717957f,
                    -0.7072754f, 16.003891f, 8.984665f, 2.9111328f, -5.8222656f, 6.0014496f, 4.0009613f, -7.0727844f, -3.5363922f, -4.083481f, -4.744568f, 1.8978271f, -4.851883f, -4.9040985f, 8.827362f, 1.500351f,
                    -2.6839294f, 1.3419647f, -2.000473f, -4.950943f, 3.5785828f, 9.866348f, 7.78006f, 9.194626f, 0.5001068f, -7.780075f, -9.194626f, 30.766663f, 30.766647f, 10.18898f, 29.705734f, -0.8842621f,
                    43.510605f, 8.593323f, 50.01219f, 47.01146f, 0.22166443f, -0.6360779f, 8.358322f, 9.461197f, 0.47857666f, -0.3453064f, 12.972351f, 18.479706f, 0.7798462f, -0.9223938f, 28.998444f, 28.998459f,
                    1.5706482f, 0.8125458f, 2.1036377f, 1.4416046f, -3.2700195f, 1.3783264f, 5.377182f, 2.7761078f, 2.255478f, 10.029755f, 10.02977f, 3.6502533f, 3.346527f, 34.89119f, 38.91707f, 20.6091f,
                    8.429062f, 11.701645f, 28.291168f, 49.011948f, 4.831085f, 9.952286f, 27.583893f, -1.546402f, -6.6485596f, 6.369568f, 1.8787537f, 29.96112f, 24.96759f, 28.871262f, 25.49739f, 3.5309448f,
                    2.8043365f, 21.087662f, 23.40332f, -0.9273987f, 4.4567566f, 16.76207f, 26.006348f, 31.759903f, 40.706375f, 20.841507f, 21.012787f, -0.27223206f, 1.055542f, 31.03444f, 1.3739319f, 4.178879f,
                    39.36441f, 26.006332f, 21.952606f, 4.1931915f, -1.032608f, 10.957123f, 10.912506f, 5.943695f, 13.373322f, 38.469757f, 40.25905f, 24.059387f, 19.650177f, 16.15944f, 14.451965f, 11.953293f,
                    11.261261f, 9.4387665f, 9.224228f, 7.7834167f, 36.23314f, 7.837921f, 6.616104f, 43.010483f, 6.8416443f, 5.750519f, 32.88849f, 34.301224f, 39.81172f, 37.97635f, 6.094116f, 4.8251343f,
                    6.9920044f, 29.007065f, 5.399338f, 8.190186f, -5.424591f, 8.245361f, -6.799301f, -9.005081f, -4.4880066f, -0.6737366f, 13.24855f, 37.48581f, 5.0792084f, 27.286682f, -4.783066f, 22.813461f,
                    25.944717f, 32.50792f, 11.227707f, 9.89238f, 17.063766f, -0.38497925f, 33.9494f, 29.809402f, 35.785812f, 35.11792f, 21.471481f, 9.678787f, 11.070663f, 0.19615173f, -1.6503143f, 5.1002502f,

                    0.98080444f, 15.003647f, -1.2129669f, 11.00267f, 10.002426f, 1.9616394f, 2.887436f, 3.1386108f, 6.081085f, 8.6623535f, 7.604477f, 2.747879f, 5.2236023f, 5.716873f, 4.0862885f, 7.2778473f,
                    8.322525f, 8.287109f, 13.503281f, 8.729797f, 6.872406f, 10.002441f, 8.005615f, 8.248215f, 7.49028f, 7.3351135f, 11.18306f, 14.314316f, 7.485138f, 7.1571503f, 8.554443f, 8.166946f,
                    13.419678f, 14.29216f, 12.023743f, 5.3085175f, 6.009781f, 8.575287f, 9.841095f, 10.394836f, -2.2141266f, -1.8095093f, 4.366699f, 14.8528595f, 3.6190186f, 11.703293f, 1.2651978f, 11.703278f,
                    9.239853f, 12.968506f, 12.968491f, -1.5693054f, 8.238892f, 7.4416504f, 25.304398f, 10.138748f, 42.048355f, 4.829254f, -3.5909882f, -3.721939f, -0.74438477f, 9.2217865f, 42.51036f, 42.01024f,
                    -2.729416f, -4.7144623f, 1.3731384f, 8.305145f, 34.443848f, -1.736908f, -9.677063f, 9.047546f, 11.386963f, 13.475479f, 16.99826f, 20.789673f, 30.41301f, 23.67714f, 19.682205f, 18.787552f,
                    14.476074f, 12.12973f, 10.200516f, 8.8797f, 9.248871f, 31.82756f, 9.60347f, 9.925201f, 7.2832336f, 21.218384f, 6.506958f, 11.4579315f, 7.3017426f, 5.755356f, -3.638916f, 8.975998f,
                    -3.6389008f, 19.192352f, 14.761642f, 26.56459f, 21.92566f, 18.389252f, 7.454239f, 5.7749023f, 1.3096161f, 4.2349396f, -1.3768158f, -2.8467407f, 6.94191f, 15.56015f, 9.489151f, -2.1110992f,
                    5.7301025f, -1.5815277f, 4.4918213f, 11.15863f, 4.427429f, 24.0475f, 20.212189f, 8.946442f, 20.511093f, 12.731018f, 12.704803f, 5.367874f, 10.972321f, 3.7106018f, 5.8151855f, 4.920532f,
                    4.147156f, 1.151062f, 3.2724457f, 7.780075f, 13.003159f, 18.00438f, 3.4649353f, 2.9599f, 3.082962f, 2.5461884f, 2.801239f, 2.2331543f, 2.9412994f, 2.4047394f, 3.4074707f, 2.631012f,
                    4.0424194f, 2.9424438f, 3.3963318f, 6.3332825f, 4.111969f, 9.817337f, 5.0012054f, -10.972321f, -8.554443f, -11.159348f, -10.309982f, -13.121796f, -8.243637f, -0.40834045f, -9.936462f, -8.490814f,
                    -11.080704f, -10.789017f, 15.956772f, 9.044144f, -8.715271f, -7.6262665f, -9.053177f, 17.681976f, 20.004868f, -9.086609f, 10.288422f, 0.16442871f, -9.432358f, 12.5030365f, -9.219696f, 11.630386f,
                    -6.936447f, -7.275009f, 8.051804f, 1.7324524f, 2.9925232f, 10.97261f, 3.4496307f, 2.0652313f, -11.703049f, 3.9891968f, 3.6796265f, 3.990036f, -11.967575f, -11.58931f, -11.961472f, -11.453995f,
                    -11.953644f, -11.290421f, -11.943359f, -11.088898f, -11.92952f, -10.834686f, -11.910233f, -10.504654f, -11.882278f, -10.060181f, -11.839615f, -11.769836f, -11.6445465f, -11.386963f, -10.735748f, 3.0007172f,
                    -5.0012054f, -3.2667847f, 14.712296f, -3.9232788f, 6.865738f, -1.9616394f, -1.6981506f, -1.2651978f, -0.4473114f, -1.7324524f, 9.808197f, 7.3502502f, -4.900177f, 6.709839f, -7.1571503f, -10.96283f,
                    9.548279f, -3.8900146f, 2.4754639f, -2.4754639f, 12.127304f, 4.744568f, 10.61705f, 4.619919f, -7.5913086f, -0.80197144f, -0.26731873f, 6.929886f, 15.182632f, 6.011856f, 13.284805f, -5.6934814f,
                    -9.489151f, -6.7191467f, 0.35362244f, -5.304596f, 3.89003f, 3.8900146f, 5.304596f, 4.5973053f, -10.609177f, 0.53463745f, -2.2193298f, -4.5445404f, -2.4500732f, 4.161255f, 6.65802f, -9.154785f,

                    -9.987045f, 11.65155f, -12.002914f, -11.65155f, -5.82576f, -9.669006f, -7.001709f, 2.2288818f, -5.2007294f, 3.1575775f, -3.1537323f, 9.154785f, 2.4967499f, 9.987045f, -0.6668091f, 2.7861023f,
                    0.4365387f, 2.8467407f, 0.73046875f, 12.335892f, -1.2250366f, 3.32901f, 3.7148132f, 1.64357f, 3.795639f, 1.8745422f, 3.8470306f, 13.464615f, 6.262512f, -4.0424194f, -7.604477f, -12.250427f,
                    -6.3348694f, -12.48378f, -14.670227f, 0.32356262f, 1.9528351f, 0.24082947f, 1.9407501f, 0.1361084f, 1.923523f, -0.18261719f, 1.8573914f, -0.4365387f, -1.3336487f, 15.622803f, 3.9057007f, 2.1674652f,
                    3.8815002f, 7.4264374f, 8.1336975f, 1.0609131f, -1.0609131f, 2.500595f, -4.5973053f, -3.89003f, -0.35362244f, -10.255539f, -7.4264374f, 1.7682037f, 10.6692505f, -3.5008392f, -3.0007172f, -8.599945f,
                    7.21286f, 4.5010834f, 14.145584f, 13.438309f, 7.8465576f, -7.8465576f, -6.9782257f, 8.767532f, -6.9638214f, 9.178207f, 7.0016937f, 4.083481f, 6.1252136f, -7.872879f, -8.827362f, -6.865738f,
                    3.9232788f, -5.3929596f, -5.967041f, -5.5013275f, -9.808197f, -7.0108337f, -5.884903f, 13.731461f, 5.884903f, 12.750656f, 11.769836f, -2.3575897f, 6.1297455f, -0.98080444f, 5.197403f, -4.619919f,
                    -9.841095f, 6.533554f, 5.6934814f, -7.3502502f, 7.5913086f, 7.758606f, -6.3523865f, -11.630386f, -13.284805f, -5.3085175f, -1.8860626f, -5.197403f, -10.438065f, -8.166946f, -8.575287f, -6.6424103f,
                    -0.5774689f, -2.8584137f, -5.7749023f, -3.795639f, 5.716858f, -11.433731f, 11.54982f, -9.239853f, -3.4649353f, -11.842087f, 14.700516f, 12.658783f, 12.52504f, -2.858429f, -8.946442f, 9.800354f,
                    1.7324677f, 6.3523865f, 0.5774689f, -1.1788025f, -1.2063446f, -2.887436f, -3.1630402f, -1.1549683f, -3.9205933f, -4.007904f, 4.9040985f, -14.712296f, 5.295929f, -7.758606f, -8.49913f, -3.05159f,
                    10.26445f, -9.385651f, -10.51207f, 4.438675f, 1.0692902f, 1.9249725f, 0.82218933f, 10.688538f, -1.8978271f, 3.5008392f, -11.18306f, 10.735748f, -7.50737f, 2.3099518f, 7.5204315f, 6.936447f,
                    7.275009f, 4.667801f, 9.356415f, 9.951508f, -3.3006287f, -1.6644897f, -2.6672974f, -11.017426f, -8.924362f, -7.699875f, 5.42247f, 5.5796814f, 5.428528f, 2.530426f, 2.714264f, 10.789017f,
                    -10.288422f, -4.0009613f, -3.8815002f, 8.49913f, -8.6623535f, -4.5010834f, -14.145584f, 5.66803f, 6.3348694f, -6.93544f, 10.96283f, -6.929886f, -0.8322449f, 8.335373f, 4.993515f, 5.3346252f,
                    6.7191467f, 3.1827545f, 10.81929f, -1.7682037f, -4.178879f, 8.599945f, -3.1827545f, -8.1336975f, -5.3346252f, -8.051804f, 2.6732635f, 2.77417f, -3.6675415f, -8.045105f, -12.20639f, -12.206375f,
                    6.93544f, 7.7677f, -12.023743f, -13.03862f, 1.6670685f, -12.731018f, -9.548279f, -2.4967499f, 5.82576f, 8.840988f, -9.393784f, 15.693115f, 12.073135f, -1.8573914f, -9.287018f, -2.500595f,
                    -13.419678f, 10.438065f, 8.540222f, 1.2250366f, 12.250427f, 12.364975f, 11.6445465f, -2.9111328f, 12.259506f, -2.9424438f, 11.839615f, -2.3099518f, -2.9599f, 11.520538f, 11.882278f, -3.082962f,
                    -2.9705658f, 11.485107f, 11.910233f, -3.2214203f, -2.9775543f, 11.450287f, 11.92952f, -3.3242645f, -2.9823608f, 9.002182f, 8.947128f, 9.617584f, -0.9617615f, -0.9488983f, -7.4873657f, 9.861404f,

                    -4.56546f, 5.478546f, -6.011856f, -8.840988f, 10.255539f, -10.394836f, 4.900177f, -6.1252136f, 3.6751251f, 13.859787f, 9.941254f, -3.9765015f, -6.9588776f, 2.0004883f, 3.2667847f, 9.349121f,
                    10.202332f, 10.384689f, -5.126938f, -5.1867065f, -3.9465332f, -5.192337f, -3.9607544f, 0.30158997f, -0.6190033f, 10.852966f, 3.6675415f, 7.668518f, 0.6668091f, -2.0004883f, 8.019791f, 5.5013275f,
                    11.67009f, 12.897308f, 11.9088745f, 1.043747f, 13.585312f, 14.088577f, 13.669937f, 13.727325f, 11.46022f, 12.653152f, 13.73941f, 14.838379f, -10.05835f, 13.744812f, 4.787506f, 10.958694f,
                    -6.906433f, 14.799515f, 15.278976f, -5.354599f, -4.9331665f, -4.523773f, 5.9411316f, 12.872482f, 12.169556f, 12.826233f, 11.761795f, 12.614929f, 11.025391f, -2.1827087f, -1.4555664f, -0.8730774f,
                    11.842087f, 8.983643f, -8.084869f, -12.073135f, -3.2079163f, -3.32901f, -2.9405823f, -8.512558f, -11.14444f, -10.215729f, 4.643509f, -1.1070557f, 0.7907562f, -1.1183014f, 0.67097473f, -13.643341f,
                    -0.9286957f, 5.5722046f, 1.1070557f, 3.0048828f, -12.177734f, 2.460266f, 4.586426f, -2.0559845f, 1.1183014f, 2.9075928f, -7.501816f, 4.2495575f, -2.0129395f, 2.0129395f, -11.406723f, 4.902725f,
                    -6.5009155f, 10.215729f, 6.8005524f, 0.15814209f, 5.591522f, -0.67097473f, 10.279907f, -4.902725f, -8.50206f, -14.985321f, 3.802246f, -9.502304f, -13.196014f, 11.228821f, -14.090668f, -18.579834f,
                    8.6983795f, 8.420776f, 9.31778f, 7.8861237f, 6.4861755f, -16.621063f, -7.4296265f, -2.2459106f, 6.038849f, 5.535324f, 5.21286f, 3.4328613f, 7.084152f, 5.851639f, 3.3549042f, -0.15814209f,
                    3.637497f, -3.0048828f, 6.5009155f, -2.7861023f, 7.4296265f, 11.887131f, 9.709625f, 2.8584137f, 7.7524567f, 10.064758f, 6.98468f, 4.696884f, -3.9538116f, -6.8005524f, -2.739273f, 9.330994f,
                    -6.816818f, -7.35614f, -2.0431366f, -3.274063f, -1.3096161f, 1.565628f, -4.4108734f, -7.3808136f, 0.18261719f, 1.7396698f, -3.6088867f, -7.944626f, 1.7376251f, 1.8635559f, 2.8443756f, -8.955429f,
                    -13.126648f, -3.7148132f, 5.7868347f, 6.0020447f, 1.3026733f, 5.6611786f, 7.2577972f, -1.674881f, -7.6699677f, 4.3311768f, 10.235367f, -4.6524353f, -7.796112f, -12.37738f, 9.86142f, 7.4331665f,
                    -14.499222f, -14.168289f, -10.106079f, -15.257965f, -14.435623f, -10.6835785f, 4.382843f, 0.22364807f, 10.404678f, 11.54512f, 2.7896729f, -4.413681f, -12.301376f, -11.637909f, -2.6885834f, -11.67009f,
                    0.82514954f, -6.5015717f, 3.2750244f, 11.229553f, 2.2618713f, 0.40098572f, 9.170105f, 4.6745605f, 9.490082f, 11.896027f, 2.6885834f, 8.722794f, 0.9286957f, -4.643509f, -5.5722046f, -6.3074646f,
                    -4.438675f, 14.859238f, -0.97036743f, 6.6424103f, -4.4918213f, -1.8375549f, -2.0212097f, 0.49040222f, 1.4437103f, -8.373611f, 4.413681f, -1.4712219f, 6.0636444f, 9.617432f, 1.2512207f, -1.5621643f,
                    12.494049f, 3.879303f, -2.460266f, -2.059723f, -15.913773f, -7.218628f, -18.190964f, -13.791931f, 6.7676544f, 6.0148315f, 8.076019f, 7.3808136f, 6.5481415f, -13.001846f, 13.001846f, -6.641144f,
                    -5.1043396f, -5.21286f, 0.6125183f, 2.008789f, -6.3293915f, -7.749466f, 1.8375549f, -3.0626068f, 1.9644318f, -3.3549042f, -3.742569f, -2.77417f, 5.3925934f, 1.3977356f, 4.716095f, 7.3175354f,

                    5.456772f, -6.933502f, -5.020233f, 10.277435f, -4.5220795f, 11.568359f, 9.822189f, -1.6362152f, 2.0212097f, 8.275467f, 4.334381f, 9.287018f, 4.801956f, 2.8375244f, 3.6523743f, 3.1045074f,
                    -6.1115875f, -5.144211f, 9.385651f, 11.85405f, 8.294296f, 4.5836945f, -3.7106018f, 13.096268f, 22.005356f, 12.989761f, 2.997635f, 1.9984131f, 2.4711914f, 1.4732056f, 2.9973297f, 2.4943848f,
                    1.9982147f, 1.4966278f, 19.004623f, 2.9969788f, -8.990967f, 1.9979858f, 8.989746f, -1.9977112f, 9.196121f, 8.988342f, 9.264374f, 8.986664f, 5.991104f, 15.560135f, 5.993164f, 12.985199f,
                    12.741623f, -7.9908905f, -8.198944f, -3.9954376f, -3.7670898f, -3.6940155f, -3.994812f, -3.9940643f, 12.983139f, 12.782501f, -7.989624f, -8.150314f, 12.980728f, -1.9970245f, -7.988144f, 2.9858398f,
                    -5.9716797f, 3.842682f, 2.9823608f, 4.0630035f, 2.9775543f, 1.9905548f, 2.8545532f, 3.0780182f, 1.9882507f, 1.9850464f, -1.996582f, -2.522766f, -1.996048f, -2.4879456f, -1.9953918f, -5.986206f,
                    9.982956f, 6.9880676f, 6.439682f, 6.4686584f, 6.986206f, 6.983902f, -6.981079f, 1.9945984f, -6.953583f, -6.9775085f, -6.854355f, -6.972946f, 1.9922638f, 11.967575f, 11.920425f, 11.995132f,
                    11.961472f, 11.953644f, -10.61705f, -12.52504f, -6.533554f, -5.716873f, -8.540222f, -8.983643f, 13.282288f, 1.1549683f, -14.233704f, 16.742264f, 15.517227f, -12.704803f, -14.29216f, 15.88031f,
                    13.895279f, 8.001938f, 16.267426f, 15.592255f, 16.764145f, 5.2324066f, -6.9587097f, -3.4882812f, -8.932678f, -3.9700775f, 7.1857452f, 10.93483f, 13.812881f, -5.9198f, 6.906433f, 10.779831f,
                    8.958878f, 9.703796f, 0.9488983f, 8.084869f, 10.208694f, 0.24258423f, 3.015854f, 0.31629944f, -11.433746f, -15.182632f, 7.50737f, 6.224045f, 5.354599f, 6.2486877f, 5.389908f, 6.277237f,
                    6.3074646f, 1.4555664f, -1.4603424f, -1.3474731f, -0.65774536f, 6.634857f, 4.4282684f, -6.0014496f, 1.9732666f, 3.9465332f, -0.19248962f, -0.9430237f, -8.854858f, -9.430389f, -10.253876f, -6.7926483f,
                    -7.7630157f, -1.9407501f, -8.142792f, -5.716858f, 11.433746f, -11.761795f, -0.8166809f, -10.12175f, 7.238037f, 16.333923f, -13.585312f, -15.380829f, -15.108856f, -12.968506f, -13.282288f, 2.2141266f,
                    0.97036743f, 3.1630402f, 0.65774536f, 8.723099f, 8.490814f, -12.127304f, -9.168015f, 15.526062f, 9.09877f, 17.210464f, 15.437561f, 16.918045f, 9.50589f, 3.6302032f, 7.528656f, -8.358322f,
                    -0.10371399f, 7.7630157f, 8.733398f, -63.015366f, -75.51843f, -62.01512f, -63.515488f, -24.8264f, -26.615707f, -53.67874f, -46.680435f, -32.079178f, -62.515244f, -31.277191f, -26.392044f, -27.286682f,
                    -25.319443f, -21.545914f, -26.192535f, -22.47461f, -21.00116f, -18.029373f, -21.914246f, -18.978287f, -17.808151f, -15.388123f, -18.745422f, -16.349884f, -15.3811035f, -13.342712f, -16.333923f, -14.313095f,
                    -16.285583f, -59.01439f, -17.190338f, -55.167786f, -48.802277f, -38.90036f, 7.8930817f, 7.1223907f, -3.015854f, 12.002914f, 13.438293f, 2.1577911f, 3.719574f, -3.7271118f, 12.652191f, 11.377502f,
                    1.5693054f, 2.993103f, 2.9066315f, 1.9953918f, 1.9122467f, 2.9918976f, 2.9801025f, 1.9867401f, 2.9903717f, 0.9967804f, 1.993576f, 11.943359f, 3.9811096f, 10.948074f, 4.9763947f, 9.952789f,

                    5.9716797f, -2.9858398f, -1.9905548f, -0.9952698f, 1.8664398f, 2.9549103f, 1.9699402f, 0.9925232f, 6.5015717f, 7.501816f, 8.50206f, 17.491928f, 16.939728f, -10.852966f, -10.59285f, 1.3336487f,
                    9.669006f, -12.12973f, -9.349121f, 9.391998f, -6.668274f, 18.375656f, -11.54982f, -12.750656f, -13.731461f, -10.0299835f, 15.044983f, 7.0373383f, 17.224228f, 14.1483f, -2.6732635f, 9.393784f,
                    -3.4697418f, 6.641144f
            },
            {
                    2.000473f, 1.500359f, -3.000702f, 0.000000f, 15.104616f, 13.698100f, 15.006531f, 15.618219f, 15.119509f, -3.578576f, -3.131243f, -2.000458f, -1.000214f, -4.950942f, 1.333669f, 4.438682f,
                    2.121828f, 4.667811f, 3.536400f, -1.414542f, -3.500832f, 1.414557f, -9.194614f, -1.500343f, -9.901900f, -8.322515f, 4.243671f, -4.993515f, 0.707286f, 7.072786f, -11.316457f, -2.121813f,
                    9.808209f, 3.923293f, 2.942458f, 5.001205f, 8.827375f, 7.846571f, 4.904112f, -4.904097f, 1.961654f, -3.923278f, 0.980819f, -2.829114f, -8.487343f, 4.950958f, -2.942443f, 2.829129f,
                    -4.243656f, -7.072770f, -2.236606f, 1.000229f, 1.789288f, 0.894652f, 0.447318f, -1.341955f, -4.473213f, 2.041733f, 0.801984f, 1.633387f, -4.025879f, -0.500099f, 1.387076f, 0.554833f,
                    1.603952f, 0.816693f, 0.408347f, 2.683940f, 2.858442f, 2.450080f, 2.667308f, 1.664500f, 0.832258f, 2.405936f, -0.894636f, 2.138598f, 2.236622f, 1.336629f, 2.333913f, 1.667063f,
                    4.025895f, -1.789273f, 3.131258f, -6.262501f, 4.473228f, 14.003403f, 11.316472f, 8.487358f, -9.391989f, -6.365499f, 10.609186f, 9.901915f, -5.658228f, -4.920531f, -5.367864f, -7.780056f,
                    -9.800351f, -5.815183f, -6.709834f, -3.675120f, 6.365515f, -1.633371f, 5.658244f, -2.041718f, 0.935912f, 1.747021f, 0.436759f, 1.062745f, 1.247868f, 6.560632f, 6.202564f, 5.877226f,
                    -0.561532f, 0.873518f, -0.686320f, 0.561547f, 0.062501f, -0.374350f, 0.686336f, 0.748730f, -0.748714f, 0.374365f, -0.187167f, -0.707271f, 9.194629f, 8.051804f, 6.262516f, -10.609171f,
                    -4.042405f, -7.604471f, -12.250416f, -6.334859f, -12.483772f, -14.670222f, 4.501091f, -7.846555f, -6.978225f, 8.767544f, -6.963821f, 9.178210f, -11.769833f, -5.001190f, -7.872877f, -8.827359f,
                    -6.865736f, -1.961639f, -5.392950f, -5.967041f, -5.501320f, -9.808194f, -7.010819f, -5.884901f, 7.780072f, 7.780087f, -3.536385f, 16.003891f, 8.984680f, 2.911147f, -5.822263f, 6.001450f,
                    4.000961f, -4.083467f, -4.744564f, 1.897841f, -4.851881f, -2.683925f, 1.341970f, 3.578592f, 9.866361f, 0.500114f, -7.780072f, 30.766674f, 30.766659f, 10.188983f, 29.705745f, -0.884260f,
                    43.510613f, 8.593332f, 50.012192f, 47.011460f, 0.221668f, -0.636072f, 8.358328f, 9.461204f, 0.478584f, -0.345296f, 12.972366f, 18.479713f, 0.779858f, -0.922393f, 28.998459f, 28.998474f,
                    1.570657f, 0.812558f, 2.103639f, 1.441611f, -3.270008f, 1.378332f, 5.377188f, 2.776120f, 2.255482f, 10.029755f, 10.029770f, 3.650263f, 3.346532f, 34.891203f, 38.917082f, 20.609110f,
                    8.429068f, 11.701656f, 28.291173f, 49.011948f, 4.831098f, 9.952300f, 27.583902f, -1.546395f, -6.648554f, 6.369574f, 1.878767f, 29.961135f, 24.967605f, 28.871275f, 25.497398f, 3.530953f,
                    2.804349f, 21.087663f, 23.403326f, -0.927398f, 4.456764f, 16.762081f, 26.006348f, 31.759915f, 40.706386f, 20.841520f, 21.012787f, -0.272221f, 1.055543f, 31.034440f, 1.373938f, 4.178882f,
                    39.364416f, 26.006332f, 21.952621f, 4.193194f, -1.032593f, 10.957137f, 10.912520f, 5.943709f, 13.373327f, 38.469764f, 40.259052f, 24.059388f, 19.650187f, 16.159442f, 14.451972f, 11.953307f,

                    11.261265f, 9.438773f, 9.224231f, 7.783429f, 36.233143f, 7.837934f, 6.616114f, 43.010483f, 6.841657f, 5.750530f, 32.888502f, 34.301228f, 39.811734f, 37.976364f, 6.094118f, 4.825147f,
                    6.992020f, 29.007065f, 5.399344f, 8.190188f, -5.424582f, 8.245365f, -6.799298f, -9.005066f, -4.487999f, -0.673732f, 13.248554f, 37.485817f, 5.079210f, 27.286687f, -4.783062f, 22.813474f,
                    25.944732f, 32.507927f, 11.227710f, 9.892393f, 17.063767f, -0.384970f, 33.949416f, 29.809415f, 35.785824f, 35.117922f, 21.471489f, 9.678798f, 11.070665f, 0.196155f, -1.650309f, 5.100252f,
                    15.003647f, -1.212955f, 11.002670f, 10.002426f, 2.887449f, 3.138613f, 6.081086f, 8.662364f, 7.604486f, 2.747890f, 5.223606f, 5.716884f, 4.086290f, 7.277852f, 8.322530f, 8.287114f,
                    13.503288f, 8.729808f, 6.872419f, 10.002441f, 8.005615f, 8.248219f, 7.490288f, 7.335119f, 11.183062f, 14.314321f, 7.485145f, 7.157153f, 8.554452f, 8.166949f, 13.419684f, 14.292164f,
                    12.023743f, 5.308522f, 6.009781f, 8.575296f, 9.841108f, 10.394842f, -2.214115f, -1.809506f, 4.366705f, 14.852873f, 3.619028f, 11.703304f, 1.265202f, 11.703288f, 9.239857f, 12.968521f,
                    12.968505f, -1.569299f, 8.238895f, 7.441657f, 25.304402f, 10.138750f, 42.048356f, 4.829267f, -3.590982f, -3.721935f, -0.744381f, 9.221790f, 42.510369f, 42.010239f, -2.729412f, -4.714458f,
                    1.373144f, 8.305150f, 34.443854f, -1.736904f, -9.677058f, 9.047547f, 11.386969f, 13.475486f, 16.998276f, 20.789685f, 30.413016f, 23.677150f, 19.682216f, 18.787564f, 14.476081f, 12.129732f,
                    10.200519f, 8.879713f, 9.248875f, 31.827573f, 9.603479f, 9.925216f, 7.283238f, 21.218387f, 6.506966f, 11.457939f, 7.301747f, 5.755367f, -3.638911f, 8.976013f, -3.638895f, 19.192355f,
                    14.761654f, 26.564599f, 21.925673f, 18.389258f, 7.454246f, 5.774914f, 1.309621f, 4.234943f, -1.376806f, -2.846738f, 6.941924f, 15.560159f, 9.489158f, -2.111086f, 5.730114f, -1.581521f,
                    4.491829f, 11.158633f, 4.427436f, 24.047501f, 20.212192f, 8.946456f, 20.511101f, 12.731029f, 12.704814f, 5.367880f, 10.972335f, 3.710613f, 5.815198f, 4.920546f, 4.147158f, 1.151064f,
                    3.272450f, 13.003159f, 18.004379f, 3.464942f, 2.959915f, 3.082963f, 2.546197f, 2.801251f, 2.233158f, 2.941314f, 2.404746f, 3.407477f, 2.631022f, 4.042420f, 3.396338f, 6.333288f,
                    4.111971f, 9.817350f, -10.972320f, -8.554437f, -11.159335f, -10.309972f, -13.121782f, -8.243626f, -0.408331f, -9.936461f, -8.490806f, -11.080690f, -10.789014f, 15.956786f, 9.044144f, -8.715267f,
                    -7.626261f, -9.053162f, 17.681987f, 20.004868f, -9.086595f, 10.288426f, 0.164431f, -9.432349f, 12.503044f, -9.219684f, 11.630396f, -6.936446f, -7.274998f, 1.732464f, 2.992538f, 10.972625f,
                    3.449638f, 2.065232f, -11.703044f, 3.989212f, 3.679637f, 3.990051f, -11.967575f, -11.589303f, -11.961471f, -11.453986f, -11.953643f, -11.290410f, -11.943359f, -11.088884f, -11.929519f, -10.834684f,
                    -11.910231f, -10.504646f, -11.882277f, -10.060166f, -11.839612f, -11.644541f, -11.386954f, -10.735744f, 3.000717f, 7.001694f, 9.002182f, -3.266773f, 14.712306f, 6.865751f, -1.698146f, -1.265187f,

                    -0.447303f, -1.732448f, 7.350256f, -4.900175f, 6.709850f, -7.157137f, -10.962829f, 9.548287f, -3.890013f, 2.475471f, -2.475456f, 12.127306f, 4.744579f, 10.617060f, 4.619928f, -7.591302f,
                    6.929900f, 15.182635f, 6.011856f, 13.284810f, -5.693477f, -9.489143f, -6.719142f, 0.353628f, -5.304585f, 3.890043f, 3.890028f, 5.304601f, 4.597314f, 9.603922f, -2.219318f, -4.544533f,
                    -2.450065f, 4.161257f, 6.658030f, -5.825757f, 9.154788f, 2.496757f, -0.666804f, 2.786114f, 0.436545f, 2.846754f, 0.730480f, 12.335897f, -1.225025f, 3.329015f, 3.714824f, 1.643580f,
                    3.795651f, 1.874556f, 3.847044f, 13.464622f, -4.000946f, 0.323568f, 1.952850f, 0.240833f, 1.940764f, 0.136110f, 1.923537f, -0.182605f, 1.857404f, -0.436530f, -0.801968f, -1.333639f,
                    15.622812f, 3.905715f, 2.167468f, 3.881514f, 7.426444f, 8.133700f, 1.060914f, -1.060899f, 2.500603f, -4.597299f, -3.890028f, -0.353613f, -10.255528f, -7.426429f, 1.768215f, 10.669261f,
                    -8.599939f, 7.212863f, 14.145586f, 13.438315f, 4.083482f, 6.125216f, 16.267430f, 3.500847f, 10.735760f, 5.501335f, 13.731472f, 5.884916f, 12.750668f, 11.769848f, -2.357580f, 6.129747f,
                    -0.980804f, 5.197406f, -4.619913f, -9.841093f, 6.533562f, 5.693492f, -7.350240f, 7.591318f, 7.758618f, -6.352377f, -11.630381f, -13.284794f, -5.308507f, -1.886061f, -5.197391f, -10.438056f,
                    -8.166934f, -8.575280f, -6.642405f, -0.577462f, -2.858412f, -5.774899f, -3.795636f, 5.716869f, -11.433722f, 11.549828f, -9.239841f, -3.464927f, -11.842084f, 14.700526f, 12.658793f, 12.525048f,
                    -2.858427f, -8.946441f, 9.800366f, 1.732479f, 6.352392f, 0.577478f, -1.178790f, -1.206332f, -2.887434f, -3.163027f, -1.154955f, -3.920592f, -4.007889f, -14.712291f, 5.295933f, -7.758602f,
                    -8.499123f, -3.051575f, 10.264454f, -9.385641f, -10.512062f, 1.069291f, 1.924987f, 0.822202f, 10.688548f, 9.502312f, -1.897826f, -11.183047f, -7.001678f, -6.001434f, -7.507362f, 2.309957f,
                    7.520439f, 6.936461f, 7.275013f, 9.356420f, 9.951522f, -3.300618f, -1.664485f, -2.667292f, -11.017411f, -8.924361f, -7.699870f, 5.422477f, 5.579690f, 5.428534f, 2.530434f, 2.714275f,
                    10.789029f, -10.288411f, -3.881498f, 8.499138f, -8.662348f, -4.501076f, 5.668040f, 6.334874f, 9.987060f, -6.935439f, 10.962844f, -6.929885f, 11.651560f, 6.683162f, -0.832242f, 8.335378f,
                    4.993530f, 5.334630f, 6.719158f, 3.182757f, 10.819303f, -1.768200f, -4.178866f, 8.599954f, -3.182742f, -8.133684f, -5.334615f, -8.051789f, 2.673274f, 2.774182f, -3.667536f, -8.045090f,
                    -12.206378f, -12.002899f, -12.206363f, 6.935454f, 7.767712f, -12.023728f, -13.038605f, 1.667079f, -12.731014f, -9.548272f, -2.496742f, -9.987045f, 5.825772f, 8.841001f, -11.670085f, -6.011841f,
                    8.001938f, -9.393774f, 15.693126f, 12.073136f, -1.857389f, -9.287007f, -2.500587f, -13.419669f, 20.504997f, 17.504265f, 20.129519f, 18.504509f, 19.004623f, 16.103609f, 9.709636f, 12.831678f,
                    12.029694f, 10.541878f, 15.670481f, 9.822202f, 6.129442f, 18.784009f, 11.670100f, 18.375662f, 15.208972f, 14.503532f, 8.877379f, 15.003662f, 13.867018f, 10.255543f, 10.438071f, 8.540230f,

                    12.250431f, 12.364981f, 11.644556f, -2.911131f, 12.259510f, 11.839628f, -2.309941f, -2.959899f, 11.520546f, 11.882292f, -3.082948f, -2.970565f, 11.485115f, 11.910246f, -3.221408f, -2.977554f,
                    11.450294f, 11.929534f, -3.324254f, -2.982361f, 8.947143f, 9.617594f, -0.961761f, -0.948898f, -7.487358f, 9.861418f, -4.565454f, 5.478553f, -8.840986f, -10.394827f, 4.900191f, -6.125200f,
                    1.225040f, 3.675135f, 13.859800f, 9.941268f, -3.976501f, -6.958877f, 2.000488f, 3.266789f, 9.349126f, 10.202335f, 10.384695f, -5.126925f, -5.186694f, -3.946532f, -5.192325f, -3.960754f,
                    0.873091f, -7.668528f, 13.316045f, 1.333654f, -9.154772f, -3.334142f, 0.301595f, -0.618997f, 10.852979f, 3.667552f, 7.668528f, 0.666819f, -2.000473f, 8.019791f, 12.897322f, 11.908888f,
                    1.043748f, 13.585321f, 14.088579f, 13.669947f, 13.727337f, 11.460227f, 12.653162f, 13.739422f, 14.838392f, -10.058335f, 13.744823f, 4.787518f, 10.958709f, -6.906432f, 14.799527f, 15.278981f,
                    -5.354589f, -4.933165f, -4.523766f, 5.941146f, 12.872496f, 12.169558f, 12.826246f, 11.761807f, 12.614939f, 11.025391f, -2.182696f, -1.455558f, -0.873075f, 11.842100f, 8.983658f, -8.084855f,
                    -12.073121f, -3.207904f, -3.329000f, -2.940581f, -8.512551f, -11.144427f, -10.215717f, 4.643519f, -1.107042f, 0.790768f, -1.118288f, 0.670985f, -13.643336f, -0.928695f, 5.572213f, 1.107057f,
                    3.004883f, -12.177722f, 2.460273f, 4.586435f, -2.055970f, 1.118303f, 2.907607f, -7.501808f, 4.249561f, -2.012924f, 2.012940f, -11.406714f, 4.902739f, -6.500908f, 10.215732f, 6.800565f,
                    0.158145f, 5.591531f, -0.670970f, 10.279911f, -4.902724f, -8.502052f, -14.985321f, 3.802258f, -9.502296f, -13.196002f, 11.228824f, -14.090654f, -18.579828f, 8.698390f, 8.420783f, 9.317784f,
                    7.886137f, 6.486183f, -16.621057f, -7.429618f, -2.245899f, 6.038849f, 5.535332f, 5.212863f, 3.432868f, 7.084154f, 5.851652f, 3.354910f, -0.158129f, 3.637507f, -3.004868f, 6.500923f,
                    -2.786099f, 7.429633f, 11.887144f, 2.858427f, 7.752468f, 10.064759f, 6.984695f, 4.696895f, -3.953811f, -6.800549f, -2.739269f, 9.330999f, -6.816815f, -7.356130f, -2.043122f, -3.274052f,
                    -1.309606f, 1.565637f, -4.410864f, -7.380804f, 0.182620f, 1.739681f, -3.608881f, -7.944625f, 1.737636f, 1.863569f, 2.844388f, -8.955428f, -13.126635f, -3.714809f, 5.786847f, 6.002045f,
                    1.302678f, 5.661189f, 7.257801f, -1.674876f, -7.669963f, 4.331182f, 10.235370f, -4.652430f, -7.796109f, -12.377371f, 9.861433f, 7.433173f, -14.499214f, -14.168276f, -10.106065f, -15.257954f,
                    -14.435615f, -10.683574f, 4.382849f, 0.223651f, 10.404685f, 11.545129f, 2.789685f, -4.413672f, -12.301366f, -11.637903f, -2.688579f, 0.825162f, -6.501564f, 3.275029f, 11.229557f, 2.261875f,
                    0.400992f, 9.170108f, 4.674571f, 9.490089f, 11.896040f, 2.688594f, 8.722805f, 0.928710f, -4.643503f, -5.572198f, -6.307454f, -4.438666f, 14.859251f, -0.970367f, 6.642420f, -4.491814f,
                    -2.059709f, -15.913771f, -7.218616f, -18.190951f, -13.791928f, 6.767666f, 6.014832f, 8.076020f, 7.380819f, 6.548150f, -13.001831f, 13.001846f, -6.641138f, -5.104326f, -5.212848f, 0.612528f,

                    2.008789f, -6.329381f, -7.749462f, 1.837568f, -3.062593f, 1.964446f, -3.354894f, -3.742565f, -2.774166f, 5.392599f, 1.397742f, 4.716106f, 7.317540f, -1.562158f, 5.456779f, -6.933501f,
                    -5.020218f, 10.277440f, -4.522072f, 11.568368f, -1.636210f, 2.021210f, 8.275471f, 4.334386f, 9.287022f, 4.801968f, 2.837537f, 3.652384f, 3.104509f, -6.111574f, -5.144198f, 9.385657f,
                    11.854063f, 8.294301f, 4.583703f, -3.710597f, 13.096269f, 22.005356f, 12.989776f, 2.997650f, 1.998428f, 2.471199f, 1.473213f, 2.997345f, 2.494392f, 1.998230f, 1.496635f, 2.996994f,
                    -8.990967f, 1.998001f, 8.989761f, -1.997711f, 9.196124f, 8.988357f, 9.264378f, 8.986679f, 5.991119f, 15.560143f, 5.993179f, 12.985214f, 12.741634f, -7.990890f, -8.198932f, -3.995438f,
                    -3.767086f, -3.694011f, -3.994812f, -3.994064f, 12.983154f, 12.782513f, -7.989624f, -8.150301f, 12.980743f, -1.997024f, -7.988144f, 2.985855f, -5.971679f, 3.842695f, 2.982376f, 4.063005f,
                    2.977569f, 1.990570f, 2.854566f, 3.078019f, 1.988266f, 1.985061f, -1.996582f, -2.522759f, -1.996048f, -2.487938f, -1.995392f, -5.986206f, 9.982971f, 6.988083f, 6.439689f, 6.468666f,
                    6.986221f, 6.983917f, -6.981079f, 1.994614f, -6.953582f, -6.977508f, -6.854353f, -6.972946f, 1.992279f, 11.967590f, 11.920439f, 11.995148f, 11.961486f, 11.953658f, -10.617044f, -12.525032f,
                    -6.533547f, -5.716869f, -8.540215f, -8.983642f, 13.282292f, 1.154971f, -14.233692f, 16.742275f, 15.517235f, -12.704799f, -14.292149f, 15.880323f, 13.895293f, 15.592264f, 16.764157f, 5.232410f,
                    -6.958709f, -3.488273f, -8.932677f, -3.970077f, 7.185748f, 10.934844f, 13.812894f, -5.919799f, 6.906447f, 10.779843f, 8.958892f, 9.703807f, 0.948913f, 8.084871f, 10.208698f, 0.242588f,
                    3.015854f, 0.316304f, -11.433738f, -15.182620f, 7.507378f, 6.224048f, 5.354604f, 6.248692f, 5.389914f, 6.277241f, 6.307469f, 1.455573f, -1.460334f, -1.347463f, -0.657740f, 6.634867f,
                    4.428275f, 1.973281f, 3.946548f, -0.192477f, -0.943023f, -8.854856f, -9.430381f, -10.253864f, -6.792645f, 11.433753f, -7.763012f, -11.761791f, -0.816678f, -10.121736f, 7.238041f, 16.333928f,
                    -13.585306f, -15.380819f, -15.108843f, -12.968505f, -13.282277f, 8.723110f, 8.490822f, -12.127291f, -9.168002f, 15.526070f, 9.098772f, 17.210468f, 15.437568f, 16.918059f, 9.505898f, 3.630213f,
                    7.528664f, -8.358312f, -0.103700f, 7.763027f, 8.733410f, -9.709621f, -11.374121f, -10.541863f, 14.437278f, 17.004135f, 12.002914f, 16.974716f, 17.902235f, 12.077699f, -10.002411f, 8.502068f,
                    -9.002167f, -19.004608f, -18.504494f, -20.504982f, -17.004120f, -9.817334f, -10.502541f, 7.893095f, 7.122393f, -3.015839f, 46.011215f, 60.014633f, 17.491936f, 16.939742f, 2.157794f, 3.719585f,
                    -3.727108f, 12.652201f, 11.377508f, 1.569314f, 0.666835f, 0.333425f, -4.161242f, 6.501579f, 7.501823f, -10.852964f, -10.592844f, 9.669017f, -12.129717f, -9.349111f, 9.392004f, -6.668269f,
                    -11.549813f, -12.750652f, -13.731456f, -10.029969f, 15.044984f, 7.037339f, 17.224231f, 14.148302f, -2.673259f, 9.393790f, -3.469734f, -19.504738f, 0.490410f, 1.443717f, 4.413687f, -1.471214f,

                    1.251225f, 12.494057f, 3.879316f, -2.460258f, 6.641154f, -0.000092f, -0.025544f, 0.000000f, -0.025635f, 0.000000f, -0.025650f, 0.000000f, -0.025666f, 0.000000f, -0.025681f, 0.000000f,
                    -0.026688f, 0.000000f, -0.026703f, 0.000000f, -0.026719f, 0.000000f, -0.026734f, 0.000000f, -0.026902f, 0.000000f, -0.026917f, 0.000000f, -0.027802f, 0.000000f, -0.027817f, 0.000000f,
                    -0.028351f, 0.000000f, -0.028397f, 0.000000f, -0.028641f, 0.000000f, -0.029007f, 0.000000f, -0.030976f, 0.000000f, -0.029252f, 0.000000f, -0.029267f, 0.000000f, -0.031632f, 0.000000f,
                    -0.033433f, 0.000000f, -1494.755749f, -1534.775174f, -1443.730434f, -1699.853986f, -1717.862638f, -1538.774960f, -1405.712261f, -522.263920f, -587.295888f, -520.263096f, -531.267201f, -528.266529f, -594.298650f, -581.291722f,
                    -709.355779f, -0.024094f, -72.037110f, 0.000000f, -0.000046f, -0.000031f, 0.000000f, -0.000015f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f,
                    0.000000f, 0.000000f, 0.000000f, -0.000015f, -0.000015f, -0.000015f, -0.000015f, -0.000015f, -0.000031f, -0.000031f, -0.000031f, -0.000031f, -0.000031f, -0.000046f, -0.000046f, -0.000046f,
                    -0.000046f, -0.000046f, -0.000046f, -0.000046f, -2478.214466f, -2479.214969f, -2480.215473f, -2481.215976f, -2482.216480f, -2475.213077f, -2475.213092f, -2479.215137f, -2482.216617f, -2485.218097f, -2478.214694f, -2479.215198f,
                    -2480.215702f, -2481.216205f, -2482.216709f, -2482.216724f, -2483.217227f, -2483.217243f, -2486.218723f, -2485.218250f, -2478.214847f, -2483.217304f, -2486.218784f, -2479.215076f, -2480.215579f, -8.004013f, -8.004013f, -8.003891f,
                    -8.004013f, -8.003906f, -8.004013f, -8.003922f, -8.004013f, -8.003937f, -8.004013f, -8.003952f, -8.004013f, -8.003967f, -8.004013f, -8.003983f, -8.004013f, -8.003998f, -8.004013f, -1.000473f,
                    -3.001480f, -32.016144f, -35.017594f, -0.000534f, -37.018662f, -40.020111f, -0.000610f, -12.006058f, -15.007507f, -0.000229f, -27.013611f, -30.015061f, -0.000458f, -47.023697f, -50.025147f, -0.000763f,
                    -42.021180f, -45.022629f, -0.000687f, -17.008576f, -20.010025f, -0.000305f, -22.011093f, -25.012543f, -0.000381f, -271.148028f, -281.176410f, -1025.539864f, -2565.256687f, -2565.256840f, -271.148028f, -281.176410f,
                    -1025.539864f, -2565.256687f, -2565.256840f, -271.148028f, -281.176410f, -1025.539864f, -2565.256687f, -2565.256840f, -271.148028f, -281.176410f, -1025.539864f, -2565.256687f, -2565.256840f, -271.148028f, -281.176410f, -1025.539864f,
                    -2565.256687f, -2565.256840f, -271.148028f, -281.176410f, -1025.539864f, -2565.256687f, -2565.256840f, -271.148028f, -281.176410f, -1025.539864f, -2565.256687f, -2565.256840f, -271.148028f, -281.176410f, -1025.539864f, -2565.256687f,
                    -2565.256840f, -271.148028f, -281.176410f, -1025.539864f, -2565.256687f, -2565.256840f, -271.148028f, -281.176410f, -1025.539864f, -2565.256687f, -2565.256840f, -7708.861982f, -10285.159213f, -14132.096345f, -15427.689906f, -15427.768383f,
                    -0.000168f, -540.845274f, -540.846372f, -540.846555f, -540.846983f, 16392.003906f, 0.000000f, -0.250111f, 0.000000f, 0.000000f, -0.500237f, -529.258473f, -0.007813f, -17.008286f, -514.258900f, -771.384482f,
                    -285.139284f, -514.251148f, -6.014679f, -0.004166f, -514.255009f, -531.259495f, -257.129442f, -8.011734f, -257.133654f, -771.384482f, -533.260502f, -514.255009f, -10.016648f, -257.133684f, -771.384482f, -535.261509f,

                    -514.255009f, -12.017624f, -513.258778f, 0.000000f, -274.133928f, -1.000473f, -13.006332f, -1.004761f, -514.255009f, -538.263020f, -514.258915f, -15.019089f, -0.004303f, -514.255009f, -540.264027f, -514.258915f,
                    -0.011749f, -427.246571f, -2497.219699f, -23.017899f, -446.255985f, -2499.220737f, -26.019471f, -448.256840f, -2500.221241f, -32.022583f, -28.051469f, -2501.221805f, -30.022202f, -326.197421f, -2503.222263f, -41.022416f,
                    -160.116365f, -2505.223560f, -9.009400f, -383.225330f, -2507.224338f, -55.032731f, -253.161852f, -2509.226001f, -13.011383f, -503.284016f, -2545.242893f, -3.009171f, -333.200977f, -2512.227405f, -57.030793f, -337.202960f,
                    -2514.227924f, -39.024201f, -461.263569f, -2516.229175f, -27.020233f, -412.239200f, -2517.229282f, -50.030060f, -240.155657f, -2519.230289f, -56.033051f, -376.222126f, -2521.231220f, -47.028565f, -255.163043f, -2523.232105f,
                    -42.026078f, -348.208515f, -2525.233478f, -54.034226f, -463.264714f, -2527.234012f, -1.006241f, -263.166552f, -2491.216556f, -36.024674f, -474.270130f, -2529.235584f, -18.012284f, -475.270649f, -2531.236637f, -20.018509f,
                    -345.207172f, -2533.237308f, -46.027741f, -113.093050f, -2534.238209f, -6.006043f, -198.135393f, -2536.238453f, -35.019440f, -321.195514f, -2538.240146f, -15.012253f, -6.040681f, -2539.240192f, -38.020874f, -319.194598f,
                    -2540.241077f, -44.026322f, -423.245426f, -2543.242466f, -17.014191f, -238.155077f, -0.000488f, 0.000000f, 0.000000f, 0.000000f, -27762.967849f, -28783.481727f, -0.387594f, -27762.967849f, -30065.052811f, -28018.104173f,
                    -27762.948440f, -0.387594f, -4.005859f, -0.001022f, -0.001038f, -27762.967849f, -13165.801236f, -24953.556970f, -29299.745724f, -0.387594f, -536.623056f, -536.624216f, -536.625376f, -536.620249f, -536.620371f, -536.620493f,
                    0.000000f, -536.667384f, -536.671595f, -536.676738f, -27762.967849f, -24943.552087f, -24958.583001f, -0.387594f, -27762.967849f, -24943.552087f, -24958.583001f, -27003.565682f, -25402.799908f, 0.000000f, -27762.967849f, -29563.808072f,
                    -11885.187686f, -0.001495f, -27762.967849f, -26244.187152f, -25402.791913f, 0.000000f, -27762.967849f, -28529.302937f, -24939.604974f, -29309.766049f, -0.387594f, -17484.804166f, -13113.603128f, -8742.402350f, -4371.205478f, -4371.205478f,
                    -4371.205478f, -4371.205478f, 239.045609f, 32752.992691f, 32752.492454f, -0.500221f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, -25380.392767f, -27513.815152f, -30582.383673f, -25402.835019f, 0.000000f, -5.002426f,
                    -15.007538f, -15.007538f, -5.002655f, -0.000061f, 0.000000f, -15.007309f, -15.007538f, -0.000107f, -0.000107f, -0.000351f, -0.000046f, -0.000107f, -0.000198f, -0.000351f, -0.000046f, 0.000000f,
                    0.000000f, -0.000046f, 0.000000f, -0.000015f, 0.000000f, -0.000107f, 0.000000f, 0.000000f, 0.000000f, -32.015869f, -32.015869f, -0.000107f, -0.000015f, -0.000351f, -0.000046f, -0.000107f,
                    -0.000092f, -0.000351f, -0.000046f, -0.000107f, -0.000168f, -0.000351f, -0.000046f, -0.000107f, -0.000244f, -0.000351f, -0.000046f, -0.000076f, -0.000076f, -0.000137f, -0.000046f, -0.000259f,
                    -0.000076f, -0.000137f, -0.000046f, -0.000168f, -0.000153f, -0.000137f, -0.000046f, -0.000076f, -0.000275f, -0.000229f, -0.000046f, -25199.751476f, -27778.018082f, -28275.233570f, -99.229908f, -540.981552f,
                    -540.979599f, -540.980575f, -28018.104128f, -24440.326024f, -25721.947738f, -0.387594f, -28018.104128f, -24440.326024f, -25453.852003f, -99.229892f, -28018.104128f, -24440.326024f, -28530.131502f, -25402.819272f, 0.000000f, -541.222385f,

                    -541.223362f, -541.224338f, -539.406332f, -539.408957f, -539.413718f, -539.418173f, -539.423133f, -539.423133f, -539.433204f, -539.434546f, -539.436805f, -539.443458f, -539.444739f, -539.450965f, -539.454032f, -539.458671f,
                    -539.461906f, -539.463798f, -539.465446f, -539.467704f, -539.469718f, -539.470329f, -539.441871f, -539.435950f, -539.442603f, -539.470939f, -539.473442f, -539.472648f, -27762.967849f, -24958.559411f, -27756.976684f, -25969.060792f,
                    -99.229862f, -27762.967849f, -28532.304402f, -99.229694f, -27762.967849f, -28552.314168f, -28532.327993f, -99.229694f, -27762.967849f, -27001.556970f, -11898.217487f, -0.001495f, -27762.967849f, -30082.061112f, -29297.756252f, -11892.202792f,
                    -0.001495f, -27762.967849f, -25663.903822f, -25402.807553f, 0.000000f, -537.832273f, -537.834653f, -29807.951003f, -11896.204807f, -0.001495f, -29807.951003f, -24446.332799f, -27520.818570f, -0.387594f, -27762.967849f, -28783.481727f,
                    -29314.701976f, -29301.680201f, -25402.795926f, 0.000000f, -27762.967849f, -27773.934112f, -29299.780667f, -0.387594f, -27762.967849f, -27773.934112f, -29299.780667f, -29309.699535f, -99.229664f, -27762.967849f, -27773.934112f, -29299.780667f,
                    -27007.591089f, -99.229648f, -231.116732f, -0.001038f, 0.000000f, 0.000000f, 0.000000f, 0.000015f, 0.000000f, 0.000000f, 0.000000f, -27762.967849f, -27773.934112f, -29299.780667f, -26492.366857f, -11882.213748f,
                    -0.001495f, -27762.967849f, -28783.481727f, -29314.701976f, -28540.308431f, -25718.004486f, -29309.777707f, -99.229755f, -538.157488f, -538.160235f, -231.116732f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000015f,
                    0.000000f, 0.000000f, 0.000000f, -27762.967849f, -28783.481727f, -29314.701976f, -31095.556115f, -25718.004410f, -0.387594f, -27762.967849f, -29301.680079f, -25723.018784f, -27003.565682f, -25402.799908f, 0.000000f, -27762.967849f,
                    -25978.057206f, -25402.862455f, 0.000000f, -27762.967849f, -28275.178851f, -28291.249180f, -99.229892f, -25971.081163f, -25964.132418f, -30078.074937f, -25402.858534f, 0.000000f, -24432.353277f, -28275.194705f, -25983.067475f, -99.229603f,
                    -538.453910f, -538.460441f, -538.455741f, -538.459464f, -538.462394f, -538.464714f, -538.465263f, -538.467094f, -538.467643f, -538.468193f, -24432.353277f, -28275.194705f, -25983.067475f, -28538.307286f, -29299.698589f, -0.387594f,
                    -27762.967849f, -26226.178363f, -29809.951720f, -0.387594f, -25969.103639f, -29549.828626f, -28530.311299f, -99.229938f, -25969.103639f, -27500.828138f, -29315.741650f, -99.229725f, -541.283879f, -541.283268f, -541.575158f, -541.575158f,
                    -541.575097f, -541.575097f, -541.575158f, -541.575158f, -541.575158f, -541.575158f, -25969.103639f, -26476.327871f, -29569.819028f, -0.387594f, -25969.103639f, -28269.203311f, -28791.485603f, -11883.222004f, -0.001495f, -1750.241337f,
                    -141.069780f, 0.000000f, -24845.131395f, -68.059907f, -0.002258f, 0.000000f, -1752.891096f, -154.076371f, -0.001862f, 28428.881300f, -72.061875f, -0.001801f, 0.000000f, -1750.890089f, -121.060227f, 0.000000f,
                    -2308.127001f, -75.063355f, -139.070222f, -0.001846f, -25969.103639f, -25964.077745f, -30078.074937f, -25402.858534f, 0.000000f, -0.001770f, -0.001587f, -0.002350f, -0.002060f, -25969.103639f, -26988.577996f, -30074.065309f,
                    -27000.564294f, -0.387594f, -0.001617f, -25969.103639f, -26220.202808f, -26997.633249f, -25402.807736f, 0.000000f, -99.048371f, -0.002396f, 0.000000f, -25969.103639f, -26220.202808f, -27500.878920f, -11879.247318f, -0.001495f,
                    -28275.268757f, -29314.686671f, -25979.096727f, -31092.554742f, -99.229664f, -25470.825391f, -26220.195102f, -28027.077348f, -25402.827115f, 0.000000f, -541.316732f, -541.303548f, -541.308125f, -541.313619f, -541.305745f, -541.310872f,
            }
    };

    private static final float[][] slopesX = {
            {
                    0.000000f, 1.000000f, 0.000000f, -1.500214f,
                    0.000000f, 0.000000f, -1.000000f, 0.000000f,
                    0.500000f, -0.500000f, 0.000000f, 0.499847f,
                    1.500458f, -0.499847f, -1.500458f, 1.500229f,
                    1.500458f, 0.499847f, -1.500458f, -0.499863f,
                    1.000000f, -1.000000f, 2.000000f, -2.000000f,
                    0.000000f, 0.000000f, 1.000000f, -1.000000f,
                    -0.499817f, 0.000000f, 0.062393f, -0.062393f,
                    0.000000f, 0.062332f, 0.000000f, -0.062332f,
                    0.000000f, -4.000000f, 4.000000f, 1.000000f,
                    0.000000f, -3.001556f, 0.000000f, 1.000000f,
                    0.000000f, -5.000000f, 6.001495f, -1.500000f,
                    -14.537369f, -13.528244f, 6.506424f, -13.519867f,
                    -12.520004f, 0.000000f, -12.518402f, -11.512741f,
                    -1.000000f, -11.522598f, -9.513123f, -9.514023f,
                    -8.503159f, -8.506271f, -7.507462f, 0.000000f,

                    3.500000f, -7.502777f, -6.505692f, 3.502670f,
                    -6.506439f, -5.499298f, 0.000000f, 4.003036f,
                    0.000000f, -5.502731f, 3.001617f, 0.000000f,
                    -8.000000f, 3.504852f, 0.000000f, -0.500000f,
                    -0.499435f, 7.512665f, 0.000000f, -3.501846f,
                    -3.503693f, 0.499817f, 7.500000f, 6.001511f,
                    -3.500900f, -3.001633f, -3.502670f, -2.501053f,
                    -0.499817f, 0.000000f, -3.001068f, -0.499664f,
                    -2.501328f, -4.501129f, -4.500000f, 0.000000f,
                    0.000000f, -1.500534f, 0.000000f, -5.000000f,
                    -5.001251f, -2.500336f, -4.000000f, 5.000000f,
                    1.000000f, 0.000000f, 1.000000f, 2.500900f,
                    -1.000000f, -0.500000f, 2.501312f, -2.000610f,
                    -2.000595f, 0.000000f, -1.000000f, 3.001541f,
                    8.000000f, -4.500565f, 8.013840f, -0.500000f,
                    0.000000f, 8.013809f, -4.500580f, 1.000000f,

                    4.000000f, 5.000000f, -1.000000f, 7.003494f,
                    7.000000f, 0.000000f, 2.000595f, 4.002243f,
                    3.001068f, -1.000000f, 3.001617f, -1.000000f,
                    1.500000f, -0.499619f, 0.499619f, 3.500900f,
                    0.000000f, 13.000000f, 0.000000f, 6.001511f,
                    0.000000f, -0.498413f, 1.000000f, 13.003189f,
                    0.000000f, 0.498413f, 12.029587f, 12.000000f,
                    11.005417f, 11.021622f, 10.009872f, 10.009827f,
                    9.008911f, 9.002213f, 8.000000f, 1.000000f,
                    2.000595f, -1.000000f, -1.000000f, 0.499817f,
                    -1.500000f, 1.500000f, 0.500000f, 0.499725f,
                    0.499664f, 0.500000f, 0.499710f, 0.499664f,
                    0.000000f, -0.499435f, -0.499481f, -0.500000f,
                    -0.499603f, -0.499664f, -0.499710f, 4.501129f,
                    0.000000f, -0.499481f, -0.500000f, -0.499725f,
                    -5.503433f, 5.502731f, -1.000000f, 1.000000f,

                    1.000000f, 5.004013f, -2.000000f, -1.000000f,
                    5.499313f, 1.000000f, -6.001480f, -1.000000f,
                    -3.001617f, 4.000000f, -4.000000f, 5.000000f,
                    -5.000000f, -6.001495f, -7.000000f, 7.003494f,
                    -7.003494f, -8.013809f, 8.000000f, -8.000000f,
                    -9.002213f, 2.500336f, 0.000000f, 1.000000f,
                    1.000000f, 1.000000f, 0.000000f, 1.000000f,
                    0.499496f, 1.501190f, -5.001251f, -2.501633f,
                    0.499496f, -1.000000f, 6.004593f, -4.001083f,
                    -4.002243f, -1.000000f, -1.000000f, -1.000000f,
                    -1.000000f, -4.002243f, 2.000000f, -2.000000f,
                    -3.000916f, -2.500336f, -3.000916f, -2.000000f,
                    2.000000f, 3.000000f, 5.000000f, 3.000916f,
                    2.000000f, -2.000000f, 0.000000f, 22.108109f,
                    -22.108109f, 21.056702f, -21.056702f, 21.082474f,
                    20.019608f, -21.082474f, -20.019608f, 20.044113f,

                    0.000000f, -20.044128f, 0.000000f, 19.018600f,
                    -1.000000f, 0.000000f, -1.000000f, 0.000000f,
                    -17.029175f, 18.061951f, -19.018600f, -18.061951f,
                    0.000000f, -1.000000f, -1.000000f, 0.000000f,
                    0.000000f, 18.008820f, 17.000000f, -18.008804f,
                    -17.000000f, 17.029160f, 0.000000f, -1.000000f,
                    -1.000000f, 0.000000f, 0.000000f, -1.000000f,
                    0.000000f, -1.000000f, 0.000000f, -1.000000f,
                    0.000000f, -14.034363f, 16.027451f, -1.000000f,
                    -1.000000f, 0.000000f, 0.000000f, -1.000000f,
                    0.000000f, -1.000000f, 0.000000f, -11.021622f,
                    -1.000000f, -1.000000f, 0.000000f, 0.000000f,
                    -8.000000f, -8.000000f, -2.001572f, 6.004684f,
                    -2.000732f, -2.000732f, 0.499435f, 6.500000f,
                    6.500000f, -2.500595f, 4.001175f, 2.000000f,
                    3.000000f, -3.000000f, 3.500900f, -3.500900f,

                    3.000916f, 14.034363f, -13.003189f, -13.000000f,
                    -12.029572f, -12.000000f, -10.009827f, -9.008896f,
                    -1.500000f
            },
            {
                    0.000000f, 0.500008f, -5.000000f, -4.500557f,
                    -5.001251f, -5.502724f, 0.000000f, -0.500008f,
                    0.000000f, 1.000000f, 1.500221f, 1.000000f,
                    1.000000f, -1.500206f, 0.000000f, 0.000000f,
                    -1.000000f, 0.000000f, 5.000000f, 0.000000f,
                    0.000000f, 0.499855f, 1.500450f, -0.499840f,
                    -1.500450f, 1.500450f, 0.499840f, -1.500450f,
                    -0.499840f, -1.000000f, 2.000000f, -2.000000f,
                    0.000000f, 0.000000f, -1.000000f, -0.499809f,
                    0.000000f, 0.062394f, -0.062394f, 0.000000f,
                    0.062333f, 0.000000f, -0.062333f, 1.000000f,
                    -1.000000f, 0.000000f, 0.499809f, 0.000000f,
                    -5.503426f, 5.502724f, -4.501137f, -4.500572f,
                    0.000000f, -4.000000f, 4.000000f, 0.000000f,
                    -3.001541f, 0.000000f, 1.000000f, 6.001480f,
                    -1.500008f, -14.537346f, -13.528252f, 6.506447f,

                    -13.519875f, -12.519982f, 0.000000f, -12.518410f,
                    -11.512749f, -1.000000f, -11.522591f, -9.513115f,
                    -9.514000f, -8.503151f, -8.506279f, -7.507469f,
                    0.000000f, 3.500008f, -7.502770f, -6.505684f,
                    3.502663f, -6.506447f, -5.499321f, 0.000000f,
                    4.003052f, 3.001633f, 0.000000f, -8.000000f,
                    3.504829f, -0.499992f, -0.499428f, 7.512673f,
                    0.000000f, -3.501854f, -3.503716f, 0.499809f,
                    7.500008f, 6.001495f, -3.500908f, -3.001617f,
                    -3.502663f, -2.501045f, -0.499809f, 0.000000f,
                    -3.001068f, -0.499657f, -2.501320f, -4.499992f,
                    0.000000f, 0.000000f, -1.500526f, 0.000000f,
                    -5.000000f, -2.500343f, -4.000000f, 1.000000f,
                    1.000000f, 2.500893f, -1.000000f, -0.500008f,
                    2.501335f, -2.000595f, -2.000595f, 0.000000f,
                    -1.000000f, 3.001556f, 8.000000f, 8.013840f,

                    -0.500008f, 0.000000f, 8.013809f, 1.000000f,
                    4.000000f, 5.000000f, -1.000000f, 7.003494f,
                    7.000000f, 0.000000f, 2.000595f, 4.002228f,
                    3.001068f, -1.000000f, 3.001617f, 1.500008f,
                    -0.499596f, 0.499611f, 3.500893f, 0.000000f,
                    13.000000f, 0.000000f, 6.001511f, 0.000000f,
                    -0.498405f, 1.000000f, 13.003189f, 0.000000f,
                    0.498405f, 12.029587f, 12.000000f, 11.005417f,
                    11.021622f, 10.009888f, 10.009827f, 9.008896f,
                    9.002213f, 8.000000f, 1.000000f, 2.000610f,
                    -1.000000f, -1.000000f, 0.499718f, 0.500008f,
                    0.499657f, 0.500008f, 0.499718f, 0.499657f,
                    0.000000f, -0.499428f, -0.499489f, -0.500008f,
                    -0.499596f, -0.499657f, -0.499718f, 4.501137f,
                    0.000000f, -0.499489f, -0.500008f, -0.499733f,
                    -1.000000f, 1.000000f, 1.000000f, 5.004013f,

                    -2.000000f, -1.000000f, 5.499321f, 1.000000f,
                    -6.001480f, -1.000000f, -3.001617f, 4.000000f,
                    -4.000000f, 5.000000f, -5.000000f, -6.001511f,
                    -7.000000f, 7.003494f, -7.003494f, -8.013809f,
                    8.000000f, -8.000000f, -9.002213f, 2.500328f,
                    0.000000f, 1.000000f, 1.000000f, 1.000000f,
                    0.000000f, 1.000000f, -2.000000f, 0.499489f,
                    1.501183f, -5.001251f, -2.501656f, 0.499489f,
                    -1.000000f, 6.004593f, -4.001068f, -4.002243f,
                    -1.000000f, -1.000000f, -1.000000f, -1.000000f,
                    -4.002228f, 2.000000f, -2.000000f, -3.000916f,
                    1.500008f, -2.500343f, -3.000916f, -2.000000f,
                    2.000000f, 3.000000f, 5.000000f, 3.000916f,
                    2.000000f, -1.500008f, 0.000000f, 22.108095f,
                    -22.108110f, 21.056703f, -21.056703f, 21.082475f,
                    20.019608f, -21.082475f, -20.019608f, 20.044114f,

                    0.000000f, -20.044129f, 0.000000f, 19.018601f,
                    -1.000000f, 0.000000f, -1.000000f, 0.000000f,
                    -17.029175f, 18.061952f, -19.018601f, -18.061952f,
                    0.000000f, -1.000000f, -1.000000f, 0.000000f,
                    0.000000f, 18.008820f, 17.000000f, -18.008804f,
                    -17.000000f, 17.029160f, 0.000000f, -1.000000f,
                    -1.000000f, 0.000000f, 0.000000f, -1.000000f,
                    0.000000f, -1.000000f, 0.000000f, -1.000000f,
                    0.000000f, -14.034363f, 16.027451f, -1.000000f,
                    -1.000000f, 0.000000f, 0.000000f, -1.000000f,
                    0.000000f, -1.000000f, 0.000000f, -11.021622f,
                    -1.000000f, -1.000000f, 0.000000f, 0.000000f,
                    -8.000000f, -8.000000f, -2.001572f, 6.004685f,
                    -2.000732f, -2.000732f, 0.499428f, 6.500008f,
                    6.499992f, -2.500603f, 4.001175f, 3.000916f,
                    -1.499992f, 0.000000f
            }
    };

    private static final float[][] slopesY = {
            {
                    0.000000f, 0.000000f, -1.000000f, 0.000000f,
                    1.000000f, -1.500229f, 0.000000f, 0.500000f,
                    0.000000f, 0.000000f, -0.500000f, 0.499863f,
                    -0.500000f, 0.499847f, -0.500000f, 0.000000f,
                    0.500000f, -0.499847f, 0.500000f, -0.499847f,
                    0.499817f, 0.499817f, 0.000000f, 0.000000f,
                    -2.000000f, 2.000000f, -0.499817f, -0.499817f,
                    1.000000f, 0.062393f, 0.000000f, 0.000000f,
                    -0.062393f, -0.937332f, -0.937393f, -0.937332f,
                    -16.027451f, 0.000000f, 0.000000f, -2.000595f,
                    -3.001541f, 0.000000f, -4.000000f, -4.000000f,
                    -5.000000f, 0.000000f, 0.000000f, -1.000000f,
                    0.000000f, -1.000000f, 0.000000f, 0.000000f,
                    -1.000000f, -2.501328f, 0.000000f, -1.000000f,
                    -1.000000f, 0.000000f, -2.002380f, 0.000000f,
                    -1.000000f, 0.000000f, -1.000000f, -6.506424f,

                    -3.000000f, 0.000000f, -1.000000f, 0.000000f,
                    0.000000f, -1.000000f, 3.502670f, -0.499496f,
                    -5.502731f, 0.000000f, -1.000000f, -9.002213f,
                    -1.000000f, -5.506454f, 1.500214f, 1.500458f,
                    -4.500565f, 2.502930f, 2.501312f, -1.000000f,
                    3.503693f, -1.000000f, 0.500000f, -1.000000f,
                    -0.500000f, -1.000000f, 0.000000f, -1.000000f,
                    -1.000000f, -6.001480f, -3.001068f, -2.500336f,
                    0.000000f, 0.000000f, -1.000000f, 4.501129f,
                    5.502731f, 4.001068f, 4.000000f, -1.000000f,
                    0.499374f, 0.499664f, -1.000000f, 0.000000f,
                    -5.000000f, 5.000000f, 2.501053f, 2.500900f,
                    -1.500000f, -1.500458f, 0.000000f, 1.000000f,
                    -1.000000f, 3.001541f, 3.001617f, 0.000000f,
                    3.000000f, 0.499435f, 0.500000f, -8.013824f,
                    -8.013809f, 0.000000f, -0.499420f, -1.000000f,

                    -1.000000f, -1.000000f, -8.000000f, -1.000000f,
                    0.000000f, -7.000000f, -1.000000f, -2.001114f,
                    -3.001068f, -3.001617f, 1.000000f, 1.000000f,
                    -1.000000f, -3.000000f, -3.000000f, -0.500000f,
                    13.000000f, 0.000000f, 6.001480f, 1.000000f,
                    -13.519867f, -13.031937f, -13.003204f, -1.000000f,
                    -13.000000f, -13.031952f, -1.000000f, 0.000000f,
                    -1.000000f, 0.000000f, -1.000000f, 0.000000f,
                    -1.000000f, 0.000000f, -1.000000f, -3.001617f,
                    1.000000f, 2.000595f, -2.000595f, 1.000000f,
                    1.000000f, 1.000000f, 1.500458f, 2.000000f,
                    2.500336f, -1.500458f, -2.000000f, -2.500336f,
                    -3.502670f, 4.500565f, 4.003036f, 3.500900f,
                    3.000000f, 2.500336f, 2.000000f, 0.000000f,
                    -4.501114f, -4.003052f, -3.500900f, -2.000000f,
                    0.499313f, 0.000000f, -4.000000f, 1.000000f,

                    2.000595f, 2.001343f, -0.499725f, 4.000000f,
                    -1.000000f, 6.001495f, 0.000000f, -2.501053f,
                    1.000000f, 1.000000f, 1.000000f, 1.000000f,
                    1.000000f, 1.000000f, 0.000000f, 1.000000f,
                    1.000000f, 0.000000f, 1.000000f, 1.000000f,
                    0.000000f, 0.499664f, 9.002213f, 3.001617f,
                    4.000000f, 5.000000f, 7.000000f, -6.001495f,
                    4.003052f, 4.503555f, -0.499374f, 2.000809f,
                    -4.003052f, -3.501846f, 1.500763f, 1.500534f,
                    -2.001129f, 6.001495f, 5.000000f, -6.001495f,
                    -5.000000f, 2.001129f, -0.499725f, 3.000900f,
                    2.000000f, -0.499664f, -2.000000f, -3.000916f,
                    -3.000916f, -5.000000f, 3.000000f, 2.000000f,
                    3.000916f, 0.499725f, 22.108109f, 0.000000f,
                    0.000000f, -1.000000f, -1.000000f, 0.000000f,
                    -1.000000f, 0.000000f, -1.000000f, 0.000000f,

                    -20.044113f, 0.000000f, 19.018616f, 0.000000f,
                    18.061951f, 18.008804f, 17.000000f, 17.029175f,
                    0.000000f, -1.000000f, 0.000000f, -1.000000f,
                    -19.018600f, -18.061951f, -17.000000f, -18.008804f,
                    -17.029160f, 0.000000f, -1.000000f, 0.000000f,
                    -1.000000f, 0.000000f, 10.009827f, 9.008911f,
                    8.000000f, 8.013809f, -10.009827f, -9.008896f,
                    16.027451f, 15.040588f, 15.018387f, 14.000000f,
                    14.034363f, 0.000000f, 0.000000f, -15.040588f,
                    -14.000000f, -15.018372f, -14.034363f, 12.029587f,
                    12.000000f, 11.005432f, 11.021622f, 0.000000f,
                    -12.029587f, -11.005417f, -12.000000f, -11.021622f,
                    3.000000f, -3.000000f, 6.004700f, -2.001556f,
                    -2.000732f, 2.000732f, 4.500565f, -2.500000f,
                    2.500000f, -4.001175f, 2.500595f, 0.499710f,
                    0.499603f, 0.499603f, 0.500000f, 0.500000f,

                    -2.000000f, 0.000000f, -1.000000f, 0.000000f,
                    -1.000000f, 0.000000f, 0.000000f, -1.000000f,
                    1.500000f
            },
            {
                    0.000000f, 0.000000f, 0.000000f, -0.499443f,
                    0.499367f, 0.000000f, 0.500008f, 0.000000f,
                    -1.000000f, -0.499809f, 0.000000f, 0.000000f,
                    0.499809f, 0.000000f, 1.000000f, -1.500206f,
                    0.000000f, 5.000000f, 0.000000f, -5.000000f,
                    -0.500008f, 0.499855f, -0.499992f, 0.499840f,
                    -0.500008f, 0.500008f, -0.499840f, 0.499992f,
                    -0.499855f, 0.499809f, 0.000000f, 0.000000f,
                    -2.000000f, 2.000000f, -0.499809f, 1.000000f,
                    0.062394f, 0.000000f, 0.000000f, -0.062394f,
                    -0.937331f, -0.937392f, -0.937331f, -2.000610f,
                    1.000000f, 1.500206f, 1.000000f, -5.502724f,
                    0.499321f, 0.000000f, 0.000000f, 0.499443f,
                    -16.027451f, 0.000000f, 0.000000f, -3.001541f,
                    0.000000f, -4.000000f, -4.000000f, 0.000000f,
                    -1.000000f, 0.000000f, -1.000000f, 0.000000f,

                    0.000000f, -1.000000f, -2.501335f, 0.000000f,
                    -1.000000f, -1.000000f, 0.000000f, -2.002380f,
                    0.000000f, -1.000000f, 0.000000f, -1.000000f,
                    -6.506447f, -3.000000f, 0.000000f, -1.000000f,
                    0.000000f, 0.000000f, -1.000000f, 3.502663f,
                    -0.499504f, -1.000000f, -9.002213f, -1.000000f,
                    -5.506447f, 1.500450f, -4.500572f, 2.502922f,
                    2.501320f, -1.000000f, 3.503716f, -1.000000f,
                    0.499992f, -1.000000f, -0.499992f, -1.000000f,
                    0.000000f, -1.000000f, -1.000000f, -6.001495f,
                    -3.001068f, -2.500343f, 0.000000f, -1.000000f,
                    4.501137f, 5.502724f, 4.001068f, 4.000000f,
                    -1.000000f, 0.499672f, -1.000000f, -5.000000f,
                    2.501045f, 2.500908f, -1.500008f, -1.500435f,
                    0.000000f, 1.000000f, -1.000000f, 3.001541f,
                    3.001617f, 0.000000f, 3.000000f, 0.500008f,

                    -8.013840f, -8.013809f, 0.000000f, -1.000000f,
                    -1.000000f, -1.000000f, -8.000000f, -1.000000f,
                    0.000000f, -7.000000f, -1.000000f, -2.001114f,
                    -3.001068f, -3.001617f, 1.000000f, -1.000000f,
                    -3.000000f, -3.000000f, -0.499992f, 13.000000f,
                    0.000000f, 6.001495f, 1.000000f, -13.519860f,
                    -13.031952f, -13.003204f, -1.000000f, -13.000000f,
                    -13.031952f, -1.000000f, 0.000000f, -1.000000f,
                    0.000000f, -1.000000f, 0.000000f, -1.000000f,
                    0.000000f, -1.000000f, -3.001617f, 1.000000f,
                    2.000610f, -2.000610f, 2.000000f, 1.500450f,
                    2.500343f, -1.500465f, -2.000000f, -2.500328f,
                    -3.502663f, 4.500557f, 4.003037f, 3.500908f,
                    3.000000f, 2.500328f, 2.000000f, 0.000000f,
                    -4.501122f, -4.003052f, -3.500893f, -2.000000f,
                    -4.000000f, 1.000000f, 2.000595f, 2.001343f,

                    -0.499733f, 4.000000f, -1.000000f, 6.001511f,
                    0.000000f, -2.501045f, 1.000000f, 1.000000f,
                    1.000000f, 1.000000f, 1.000000f, 1.000000f,
                    0.000000f, 1.000000f, 1.000000f, 0.000000f,
                    1.000000f, 1.000000f, 0.000000f, 0.499672f,
                    9.002213f, 3.001617f, 4.000000f, 5.000000f,
                    7.000000f, -6.001495f, 0.499733f, 4.003052f,
                    4.503563f, -0.499367f, 2.000824f, -4.003037f,
                    -3.501854f, 1.500755f, 1.500526f, -2.001114f,
                    6.001495f, 5.000000f, -6.001495f, -5.000000f,
                    2.001114f, -0.499733f, 3.000900f, 2.000000f,
                    1.000000f, -0.499657f, -2.000000f, -3.000916f,
                    -3.000916f, -5.000000f, 3.000000f, 2.000000f,
                    3.000916f, 1.000000f, 22.108110f, 0.000000f,
                    0.000000f, -1.000000f, -1.000000f, 0.000000f,
                    -1.000000f, 0.000000f, -1.000000f, 0.000000f,

                    -20.044114f, 0.000000f, 19.018616f, 0.000000f,
                    18.061952f, 18.008804f, 17.000000f, 17.029175f,
                    0.000000f, -1.000000f, 0.000000f, -1.000000f,
                    -19.018601f, -18.061952f, -17.000000f, -18.008804f,
                    -17.029160f, 0.000000f, -1.000000f, 0.000000f,
                    -1.000000f, 0.000000f, 10.009827f, 9.008911f,
                    8.000000f, 8.013809f, -10.009827f, -9.008896f,
                    16.027451f, 15.040589f, 15.018387f, 14.000000f,
                    14.034363f, 0.000000f, 0.000000f, -15.040589f,
                    -14.000000f, -15.018372f, -14.034363f, 12.029587f,
                    12.000000f, 11.005432f, 11.021622f, 0.000000f,
                    -12.029587f, -11.005417f, -12.000000f, -11.021622f,
                    3.000000f, -3.000000f, 6.004700f, -2.001556f,
                    -2.000732f, 2.000732f, 4.500572f, -2.500008f,
                    2.500008f, -4.001175f, 2.500603f, -2.000000f,
                    1.499992f, -0.060609f
            }
    };

    public static final String fileExtension = "per";
    private static final int cols = 32, rows = 32;

    private int[][][] collisions; //Layer X Y
    private float[][][] tiles;
    private final float[] xDelta = {0.0f, 1.0f, 1.0f, 0.0f};
    private final float[] yDelta = {0.0f, 0.0f, 1.0f, 1.0f};
    private static final float slopeCornerMinDiff = 0.01f;

    private static final int TYPE_BW = 0, TYPE_BW2 = 1;
    private int gameType = TYPE_BW2;

    public CollisionsBW3D(String path, int game) throws Exception {
        this(Files.readAllBytes(new File(path).toPath()), game);
    }

    public CollisionsBW3D(byte[] data, int game) {
        if(game == Game.BLACK || game == Game.WHITE){
            gameType = TYPE_BW;
        }

        tiles = new float[cols][rows][4];
        collisions = new int[2][cols][rows];

        BinaryArrayReader reader = new BinaryArrayReader(data, 0);

        reader.readUInt16(); //Skip
        reader.readUInt16(); //Skip

        for (int j = 0, c = 0; j < rows; j++) {
            for (int i = 0; i < cols; i++, c++) {
                int slope = reader.readUInt16();
                int dist = reader.readUInt16();
                collisions[0][i][j] = reader.readUInt16(); //Skip
                collisions[1][i][j] = reader.readUInt16(); //Skip
                if (slope == 2) {//Is corner
                    reader.mark();
                    reader.jumpRel(4 + cols * rows * 8 + dist * 8);
                    int slope1 = reader.readUInt16() - 1;
                    int slope2 = reader.readUInt16() * 4;
                    int dist1 = reader.readUInt16();
                    int dist2 = reader.readUInt16();
                    reader.reset();

                    tiles[i][j] = getZCoordsCorner(i, j,
                            getSlopeX(slope1 / 4), getSlopeY(slope1 / 4), getDistance(dist1),
                            getSlopeX(slope2 / 4), getSlopeY(slope2 / 4), getDistance(dist2));
                } else {//Is plane
                    tiles[i][j] = getZCoordsPlane(i, j,
                            getSlopeX(slope / 4), getSlopeY(slope / 4), getDistance(dist));
                }
            }
        }

        System.out.println("READ!");
    }

    public void saveToFile(String path) throws Exception {
        byte[] data = toByteArray();
        path = Utils.addExtensionToPath(path, "per");
        Files.write(new File(path).toPath(), data);
    }

    public byte[] toByteArray() {
        byte[] data = new byte[4 + cols * rows * 8 + getNumCorners() * 8];

        BinaryArrayWriter writer = new BinaryArrayWriter(data, 0);

        int cornersAdded = 0;
        writer.writeUInt16(cols);
        writer.writeUInt16(rows);
        for (int j = 0, c = 0; j < rows; j++) {
            for (int i = 0; i < cols; i++, c++) {
                if (isCorner(tiles[i][j])) {
                    writer.writeUInt16(2);
                    writer.writeUInt16(cornersAdded);
                    writer.mark();

                    int[] slopeIndices = getSlopeIndicesCorner(i, j, tiles[i][j]);
                    int[] distIndices = getDistanceIndicesCorner(i, j, tiles[i][j]);

                    writer.jumpRel(4 + cols * rows * 8 + cornersAdded * 8);

                    writer.writeUInt16(slopeIndices[0] + 1);
                    writer.writeUInt16(slopeIndices[1] / 4);
                    writer.writeUInt16(distIndices[0]);
                    writer.writeUInt16(distIndices[1]);
                    cornersAdded++;

                    writer.reset();
                } else {
                    int slopeIndex = getSlopeIndex(i, j);
                    int distIndex = getDistanceIndexPlane(i, j);
                    writer.writeUInt16(slopeIndex);
                    writer.writeUInt16(distIndex);
                }

                writer.writeUInt16(collisions[0][i][j]);
                writer.writeUInt16(collisions[1][i][j]);
            }
        }
        return data;
    }

    private int getNumCorners() {
        int numCorners = 0;
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                if (isCorner(getZCoords(i, j))) {
                    numCorners++;
                }
            }
        }
        return numCorners;
    }

    private float[] getZCoordsPlane(int x, int y, float slopeX, float slopeY, float distance) {
        float[] zCoords = new float[4];
        float k = (float) Math.sqrt(slopeX * slopeX + slopeY * slopeY + 1) * distance;
        for (int i = 0; i < zCoords.length; i++) {
            zCoords[i] = slopeX * (x - 16 + xDelta[i]) + slopeY * (y - 16 + yDelta[i]) + k;
        }
        return zCoords;
    }

    private float[] getZCoordsCorner(int x, int y, float slopeX1, float slopeY1, float distance1, float slopeX2, float slopeY2, float distance2) {
        float[] zCoords1 = getZCoordsPlane(x, y, slopeX1, slopeY1, distance1);
        float[] zCoords2 = getZCoordsPlane(x, y, slopeX2, slopeY2, distance2);
        return new float[]{zCoords1[0], zCoords1[1], zCoords2[2], zCoords2[3]};
    }

    public float[] getVCoords() {
        final int vertexPerTile = 4, coordsPerVertex = 3;
        float[] vCoords = new float[cols * rows * vertexPerTile * coordsPerVertex];
        for (int i = 0, c = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                for (int k = 0; k < vertexPerTile; k++, c += coordsPerVertex) {
                    vCoords[c] = i - 16.0f + xDelta[k];
                    vCoords[c + 1] = -(j - 16.0f + yDelta[k]);
                    vCoords[c + 2] = tiles[i][j][k];
                }
            }
        }
        return vCoords;
    }

    public float[] getZCoords(int x, int y) {
        float[] coords = new float[tiles[x][y].length];
        System.arraycopy(tiles[x][y], 0, coords, 0, tiles[x][y].length);
        return coords;
    }

    public void setZCoords(int x, int y, float[] coords) {
        System.arraycopy(coords, 0, tiles[x][y], 0, tiles[x][y].length);

        if (isCorner(coords)) {
            int[] slopeIndices = getSlopeIndicesCorner(x, y, coords);
            int[] distIndices = getDistanceIndicesCorner(x, y, coords);

            tiles[x][y] = getZCoordsCorner(x, y,
                    getSlopesX()[slopeIndices[0] / 4], getSlopesY()[slopeIndices[0] / 4], getDistances()[distIndices[0]],
                    getSlopesX()[slopeIndices[1] / 4], getSlopesY()[slopeIndices[1] / 4], getDistances()[distIndices[1]]);

        } else {
            int slopeIndex = getSlopeIndex(x, y);
            int distIndex = getDistanceIndexPlane(x, y);

            tiles[x][y] = getZCoordsPlane(x, y,
                    getSlopesX()[slopeIndex / 4], getSlopesY()[slopeIndex / 4], getDistances()[distIndex]);
        }
    }

    public int[] getSlopeIndicesCorner(int x, int y, float[] coords) {
        float slopeX1 = getSlopeX1(coords);
        float slopeY1;
        float slopeX2 = getSlopeX2(coords);
        float slopeY2;
        if (Math.abs(coords[0] - coords[2]) > Math.abs(coords[1] - coords[3])) {//Diagonal from 0 to 2
            slopeY1 = getSlopeY2(coords);
            slopeY2 = getSlopeY1(coords);
        } else {//Diagonal from 1 to 3
            slopeY1 = getSlopeY1(coords);
            slopeY2 = getSlopeY2(coords);
        }
        int slopeIndex1 = getClosestSlopeIndex(slopeX1, slopeY1);
        int slopeIndex2 = getClosestSlopeIndex(slopeX2, slopeY2);
        return new int[]{slopeIndex1, slopeIndex2};
    }

    public int[] getDistanceIndicesCorner(int x, int y, float[] coords) {
        float slopeX1 = getSlopeX1(coords);
        float slopeY1;
        float distance1;
        float slopeX2 = getSlopeX2(coords);
        float slopeY2;
        float distance2;
        if (Math.abs(coords[0] - coords[2]) > Math.abs(coords[1] - coords[3])) {//Diagonal from 0 to 2
            slopeY1 = getSlopeY2(coords);
            slopeY2 = getSlopeY1(coords);
            int slopeIndex1 = getClosestSlopeIndex(slopeX1, slopeY1);
            int slopeIndex2 = getClosestSlopeIndex(slopeX2, slopeY2);
            slopeX1 = getSlopesX()[slopeIndex1 / 4];
            slopeY1 = getSlopesY()[slopeIndex1 / 4];
            slopeX2 = getSlopesX()[slopeIndex2 / 4];
            slopeY2 = getSlopesY()[slopeIndex2 / 4];
            distance1 = getDistance(x - 16.0f, y - 16.0f, coords[0], slopeX1, slopeY1);
            distance2 = getDistance(x - 16.0f, y - 16.0f, coords[0], slopeX2, slopeY2);
        } else {//Diagonal from 1 to 3
            slopeY1 = getSlopeY1(coords);
            slopeY2 = getSlopeY2(coords);
            int slopeIndex1 = getClosestSlopeIndex(slopeX1, slopeY1);
            int slopeIndex2 = getClosestSlopeIndex(slopeX2, slopeY2);
            slopeX1 = getSlopesX()[slopeIndex1 / 4];
            slopeY1 = getSlopesY()[slopeIndex1 / 4];
            slopeX2 = getSlopesX()[slopeIndex2 / 4];
            slopeY2 = getSlopesY()[slopeIndex2 / 4];
            distance1 = getDistance(x - 16.0f, y - 16.0f, coords[0], slopeX1, slopeY1);
            distance2 = getDistance(x + 1 - 16.0f, y + 1 - 16.0f, coords[2], slopeX2, slopeY2);
        }
        int distIndex1 = getClosestDistanceIndex(distance1);
        int distIndex2 = getClosestDistanceIndex(distance2);

        return new int[]{distIndex1, distIndex2};
    }

    public float getSlopeX1(float[] coords) {
        return coords[1] - coords[0];
    }

    public float getSlopeX2(float[] coords) {
        return coords[2] - coords[3];
    }

    public float getSlopeY1(float[] coords) {
        return coords[3] - coords[0];
    }

    public float getSlopeY2(float[] coords) {
        return coords[2] - coords[1];
    }

    public boolean isCorner(float[] coords) {
        float slopeX1 = getSlopeX1(coords);
        float slopeX2 = getSlopeX2(coords);
        float slopeY1 = getSlopeY1(coords);
        float slopeY2 = getSlopeY2(coords);

        return (Math.abs(slopeX1 - slopeX2) > slopeCornerMinDiff) || (Math.abs(slopeY1 - slopeY2) > slopeCornerMinDiff);
    }

    public float getDistance(float x, float y, float z, float slopeX, float slopeY) {
        return (z - slopeX * (x) - slopeY * (y)) / (float) Math.sqrt(slopeX * slopeX + slopeY * slopeY + 1);
    }

    public float getDistancePlane(float[] coords, int x, int y) {
        float slopeX = getSlopeX1(coords);
        float slopeY = getSlopeY1(coords);
        return getDistance(x - 16.0f, y - 16.0f, coords[0], slopeX, slopeY);
        //return (coords[0] - slopeX * (x - 16.0f) - slopeY * (y - 16.0f)) / (float) Math.sqrt(slopeX * slopeX + slopeY * slopeY + 1);
    }

    public int getClosestDistanceIndex(float dist) {
        float minDiff = Float.MAX_VALUE;
        int minIndex = 0;
        for (int i = 0; i < getDistances().length; i++) {
            float diff = Math.abs(getDistances()[i] - dist);
            if (diff < minDiff) {
                minDiff = diff;
                minIndex = i;
            }
        }
        return minIndex;
    }

    public int getDistanceIndexPlane(int x, int y) {
        float[] coords = tiles[x][y];
        float dist = getDistancePlane(coords, x, y);
        return getClosestDistanceIndex(dist);
    }

    public float getSlopeMeanX(int x, int y) {
        float[] coords = tiles[x][y];
        return ((coords[1] - coords[0]) + (coords[2] - coords[3])) / 2.0f;
    }

    public float getSlopeMeanY(int x, int y) {
        float[] coords = tiles[x][y];
        return ((coords[3] - coords[0]) + (coords[2] - coords[1])) / 2.0f;
    }

    public int getSlopeIndex(int x, int y) {
        float[] coords = tiles[x][y];
        float slopeX = getSlopeX1(coords);
        float slopeY = getSlopeY1(coords);
        return getClosestSlopeIndex(slopeX, slopeY);
    }

    public int getClosestSlopeIndex(float slopeX, float slopeY) {
        float minDist = Float.MAX_VALUE;
        int minIndex = 0;
        for (int i = 0; i < getSlopesX().length; i++) {
            float dist = (getSlopesX()[i] - slopeX) * (getSlopesX()[i] - slopeX) + (getSlopesY()[i] - slopeY) * (getSlopesY()[i] - slopeY);
            if (dist < minDist) {
                minDist = dist;
                minIndex = i;
            }
        }
        return minIndex * 4;
    }

    private static boolean areArraysEqual(float[] tile1, float[] tile2, float tol) {
        return IntStream.range(0, tile1.length)
                .noneMatch(i -> Math.abs(tile1[i] - tile2[i]) > tol);
    }

    public void floodFill(int x, int y, float[] tile) {
        if (tile != null) {
            floodFillMatrix(tiles, x, y, tile);
        }
    }

    private static void floodFillMatrix(float[][][] screen, int x, int y, float[] newC) {
        float[] prevC = screen[x][y];
        if (areArraysEqual(newC, prevC, 0.01f)) {
            return;
        }
        int M = screen.length;
        int N = screen[0].length;
        floodFillUtil(screen, x, y, prevC, newC, M, N);
    }

    private static void floodFillUtil(float[][][] screen, int x, int y, float[] prevC, float[] newC, int M, int N) {
        // Base cases
        if (x < 0 || x >= M || y < 0 || y >= N) {
            return;
        }
        if (!areArraysEqual(screen[x][y], prevC, 0.01f)) {
            return;
        }

        // Replace the color at (x, y)
        screen[x][y] = newC.clone();

        // Recur for north, east, south and west
        floodFillUtil(screen, x + 1, y, prevC, newC, M, N);
        floodFillUtil(screen, x - 1, y, prevC, newC, M, N);
        floodFillUtil(screen, x, y + 1, prevC, newC, M, N);
        floodFillUtil(screen, x, y - 1, prevC, newC, M, N);
    }

    private float getSlopeX(int index){
        if(index < getSlopesX().length){
            return getSlopesX()[index];
        }else{
            return 0.0f;
        }
    }

    private float getSlopeY(int index){
        if(index < getSlopesY().length){
            return getSlopesY()[index];
        }else{
            return 0.0f;
        }
    }

    private float getDistance(int index){
        if(index < getDistances().length){
            return getDistances()[index];
        }else{
            return 0.0f;
        }
    }

    private float[] getSlopesX() {
        return slopesX[gameType];
    }

    private float[] getSlopesY() {
        return slopesY[gameType];
    }

    private float[] getDistances() {
        return distances[gameType];
    }
}
