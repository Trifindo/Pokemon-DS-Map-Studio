
package editor.converter;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;

import editor.handler.MapEditorHandler;

import java.awt.font.TextAttribute;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import net.miginfocom.swing.*;

import renderer.*;
import utils.Utils;

/**
 * @author Trifindo
 */
public class NsbmdOutputInfoDialog extends javax.swing.JDialog {

    private MapEditorHandler handler;

    private List<String> fileNames;
    private String imdFolderPath;
    private String nsbFolderPath;
    private boolean includeNsbtx;

    private List<byte[]> nsbmdModelsData;
    private List<String> errorMsgs;

    private Thread convertingThread;

    private static final Color GREEN = new Color(6, 176, 37);
    private static final Color ORANGE = new Color(255, 106, 0);
    private static final Color RED = Color.red;

    private enum ConvertStatus {
        SUCCESS_STATUS("SUCCESSFULLY CONVERTED", GREEN),
        CONVERTER_NOT_FOUND_STATUS("NOT CONVERTED (CONVERTER NOT FOUND)", RED),
        CONVERSION_ERROR_STATUS("NOT CONVERTED (CONVERSION ERROR)", RED),
        IMD_NOT_FOUND_ERROR_STATUS("NOT CONVERTED (IMD NOT FOUND)", RED),
        UNKNOWN_ERROR_STATUS("NOT CONVERTED (UNKNOWN ERROR)", RED),
        MOVE_FILE_ERROR_STATUS("NOT CONVERTED (ERROR MOVING FILE)", RED),
        INTERRUPT_ERROR_STATUS("NOT CONVERTED (ERROR CONVERTING THE MODEL)", RED);

        public final String msg;
        public final Color color;

        ConvertStatus(String msg, Color color) {
            this.msg = msg;
            this.color = color;
        }
    }

    /**
     * Creates new form ImdOutputInfoDialog
     */
    public NsbmdOutputInfoDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        getRootPane().setDefaultButton(jbAccept);
        jbAccept.requestFocus();

        jTable1.getColumnModel().getColumn(0).setPreferredWidth(250);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(250);

        jTable1.getColumnModel().getColumn(1).setCellRenderer(new StatusColumnCellRenderer());

        jTable1.getSelectionModel().addListSelectionListener(event -> updateView(jTable1.getSelectedRow()));

        nitroDisplayGL1.getObjectsGL().add(new ObjectGL());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new JPanel();
        jbAccept = new JButton();
        jSplitPane1 = new JSplitPane();
        jPanel2 = new JPanel();
        jScrollPane1 = new JScrollPane();
        jTable1 = new JTable();
        jLabel1 = new JLabel();
        jProgressBar1 = new JProgressBar();
        jLabel2 = new JLabel();
        jlFilesProcessed = new JLabel();
        jLabel4 = new JLabel();
        jlFilesConverted = new JLabel();
        jLabel8 = new JLabel();
        jlFilesNotConverted = new JLabel();
        jLabel3 = new JLabel();
        jlStatus = new JLabel();
        jLabel5 = new JLabel();
        jlResult = new JLabel();
        jpCard = new JPanel();
        jpDisplay = new JPanel();
        nitroDisplayGL1 = new NitroDisplayGL();
        jpErrorInfo = new JPanel();
        jScrollPane2 = new JScrollPane();
        jTextArea1 = new JTextArea();
        jLabel6 = new JLabel();

        //======== this ========
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Resulting NSBMD files info");
        setModal(true);
        setMinimumSize(null);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowActivated(WindowEvent e) {
                formWindowActivated(e);
            }
            @Override
            public void windowClosed(WindowEvent e) {
                formWindowClosed(e);
            }
        });
        Container contentPane = getContentPane();
        contentPane.setLayout(new MigLayout(
            "insets 0,hidemode 3,gap 5 5",
            // columns
            "[grow,fill]",
            // rows
            "[grow,fill]" +
            "[fill]"));

        //======== jPanel1 ========
        {
            jPanel1.setLayout(new FlowLayout());

            //---- jbAccept ----
            jbAccept.setText("OK");
            jbAccept.setEnabled(false);
            jbAccept.addActionListener(e -> jbAcceptActionPerformed(e));
            jPanel1.add(jbAccept);
        }
        contentPane.add(jPanel1, "cell 0 1");

        //======== jSplitPane1 ========
        {
            jSplitPane1.setDividerLocation(550);

            //======== jPanel2 ========
            {
                jPanel2.setLayout(new MigLayout(
                    "insets 10,hidemode 3,gap 5 5",
                    // columns
                    "[fill]" +
                    "[grow,fill]",
                    // rows
                    "[fill]" +
                    "[fill]" +
                    "[fill]" +
                    "[fill]" +
                    "[fill]" +
                    "[fill]" +
                    "[fill]"));

                //======== jScrollPane1 ========
                {

                    //---- jTable1 ----
                    jTable1.setModel(new DefaultTableModel(
                        new Object[][] {
                        },
                        new String[] {
                            "Name", "Status"
                        }
                    ) {
                        boolean[] columnEditable = new boolean[] {
                            false, false
                        };
                        @Override
                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                            return columnEditable[columnIndex];
                        }
                    });
                    jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                    jScrollPane1.setViewportView(jTable1);
                }
                jPanel2.add(jScrollPane1, "cell 0 0 2 1");

                //---- jLabel1 ----
                jLabel1.setText("NSBMD exporting progress:");
                jPanel2.add(jLabel1, "cell 0 1");
                jPanel2.add(jProgressBar1, "cell 1 1");

                //---- jLabel2 ----
                jLabel2.setText("Files processed:");
                jPanel2.add(jLabel2, "cell 0 3");

                //---- jlFilesProcessed ----
                jlFilesProcessed.setFont(new Font("Tahoma", Font.BOLD, 11));
                jlFilesProcessed.setText("0");
                jPanel2.add(jlFilesProcessed, "cell 1 3");

                //---- jLabel4 ----
                jLabel4.setText("Files converted into NSBMD:");
                jPanel2.add(jLabel4, "cell 0 4");

                //---- jlFilesConverted ----
                jlFilesConverted.setFont(new Font("Tahoma", Font.BOLD, 11));
                jlFilesConverted.setText("0");
                jPanel2.add(jlFilesConverted, "cell 1 4");

                //---- jLabel8 ----
                jLabel8.setText("Files not converted:");
                jPanel2.add(jLabel8, "cell 0 5");

                //---- jlFilesNotConverted ----
                jlFilesNotConverted.setFont(new Font("Tahoma", Font.BOLD, 11));
                jlFilesNotConverted.setText("0");
                jPanel2.add(jlFilesNotConverted, "cell 1 5");

                //---- jLabel3 ----
                jLabel3.setText("Status:");
                jPanel2.add(jLabel3, "cell 0 2");

                //---- jlStatus ----
                jlStatus.setFont(new Font("Tahoma", Font.BOLD, 11));
                jlStatus.setText("Converting...");
                jPanel2.add(jlStatus, "cell 1 2");

                //---- jLabel5 ----
                jLabel5.setText("Result:");
                jPanel2.add(jLabel5, "cell 0 6");

                //---- jlResult ----
                jlResult.setFont(new Font("Tahoma", Font.BOLD, 12));
                jlResult.setText(" ");
                jPanel2.add(jlResult, "cell 1 6");
            }
            jSplitPane1.setLeftComponent(jPanel2);

            //======== jpCard ========
            {
                jpCard.setLayout(new CardLayout(5, 5));

                //======== jpDisplay ========
                {

                    //======== nitroDisplayGL1 ========
                    {
                        nitroDisplayGL1.setBorder(new LineBorder(new Color(102, 102, 102)));

                        GroupLayout nitroDisplayGL1Layout = new GroupLayout(nitroDisplayGL1);
                        nitroDisplayGL1.setLayout(nitroDisplayGL1Layout);
                        nitroDisplayGL1Layout.setHorizontalGroup(
                            nitroDisplayGL1Layout.createParallelGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                        );
                        nitroDisplayGL1Layout.setVerticalGroup(
                            nitroDisplayGL1Layout.createParallelGroup()
                                .addGap(0, 380, Short.MAX_VALUE)
                        );
                    }

                    GroupLayout jpDisplayLayout = new GroupLayout(jpDisplay);
                    jpDisplay.setLayout(jpDisplayLayout);
                    jpDisplayLayout.setHorizontalGroup(
                        jpDisplayLayout.createParallelGroup()
                            .addGroup(jpDisplayLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(nitroDisplayGL1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
                    );
                    jpDisplayLayout.setVerticalGroup(
                        jpDisplayLayout.createParallelGroup()
                            .addGroup(jpDisplayLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(nitroDisplayGL1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
                    );
                }
                jpCard.add(jpDisplay, "CardDisplay");

                //======== jpErrorInfo ========
                {

                    //======== jScrollPane2 ========
                    {

                        //---- jTextArea1 ----
                        jTextArea1.setEditable(false);
                        jTextArea1.setColumns(20);
                        jTextArea1.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 12));
                        jTextArea1.setRows(5);
                        jTextArea1.setTabSize(3);
                        jScrollPane2.setViewportView(jTextArea1);
                    }

                    //---- jLabel6 ----
                    jLabel6.setText("Error info:");

                    GroupLayout jpErrorInfoLayout = new GroupLayout(jpErrorInfo);
                    jpErrorInfo.setLayout(jpErrorInfoLayout);
                    jpErrorInfoLayout.setHorizontalGroup(
                        jpErrorInfoLayout.createParallelGroup()
                            .addGroup(jpErrorInfoLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jpErrorInfoLayout.createParallelGroup()
                                    .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE)
                                    .addGroup(jpErrorInfoLayout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())
                    );
                    jpErrorInfoLayout.setVerticalGroup(
                        jpErrorInfoLayout.createParallelGroup()
                            .addGroup(GroupLayout.Alignment.TRAILING, jpErrorInfoLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel6)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                                .addContainerGap())
                    );
                }
                jpCard.add(jpErrorInfo, "CardErrorInfo");
            }
            jSplitPane1.setRightComponent(jpCard);
        }
        contentPane.add(jSplitPane1, "cell 0 0");
        setSize(1020, 480);
        setLocationRelativeTo(getOwner());
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        if (convertingThread == null) {
            convertingThread = new Thread(this::saveAllNsbs);
            convertingThread.start();
        }
    }//GEN-LAST:event_formWindowActivated

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        convertingThread.interrupt();
    }//GEN-LAST:event_formWindowClosed

    private void jbAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAcceptActionPerformed
        dispose();
    }//GEN-LAST:event_jbAcceptActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JPanel jPanel1;
    private JButton jbAccept;
    private JSplitPane jSplitPane1;
    private JPanel jPanel2;
    private JScrollPane jScrollPane1;
    private JTable jTable1;
    private JLabel jLabel1;
    private JProgressBar jProgressBar1;
    private JLabel jLabel2;
    private JLabel jlFilesProcessed;
    private JLabel jLabel4;
    private JLabel jlFilesConverted;
    private JLabel jLabel8;
    private JLabel jlFilesNotConverted;
    private JLabel jLabel3;
    private JLabel jlStatus;
    private JLabel jLabel5;
    private JLabel jlResult;
    private JPanel jpCard;
    private JPanel jpDisplay;
    private NitroDisplayGL nitroDisplayGL1;
    private JPanel jpErrorInfo;
    private JScrollPane jScrollPane2;
    private JTextArea jTextArea1;
    private JLabel jLabel6;
    // End of variables declaration//GEN-END:variables

    public void init(MapEditorHandler handler, ArrayList<String> fileNames,
                     String imdFolderPath, String nsbFolderPath, boolean includeNsbtx) {
        this.handler = handler;
        this.fileNames = fileNames;
        this.imdFolderPath = imdFolderPath;
        this.nsbFolderPath = nsbFolderPath;
        this.includeNsbtx = includeNsbtx;
    }

    public void saveAllNsbs() {
        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();

        nsbmdModelsData = new ArrayList<>(fileNames.size());
        errorMsgs = new ArrayList<>(fileNames.size());
        for (int i = 0; i < fileNames.size(); i++) {
            nsbmdModelsData.add(null);
            errorMsgs.add(null);
        }

        int nFilesProcessed = 0;
        int nFilesConverted = 0;
        int nFilesNotConverted = 0;
        for (String fileName : fileNames) {

            if (!Thread.currentThread().isInterrupted()) {
                System.out.println(nFilesProcessed + "  IMD processing...");
                String imdFileName = Utils.removeExtensionFromPath(fileName) + ".imd";
                String nsbFileName = Utils.removeExtensionFromPath(fileName) + ".nsbmd";

                String pathOpen = imdFolderPath + File.separator + imdFileName;
                String pathSave = nsbFolderPath + File.separator + nsbFileName;

                ConvertStatus exportStatus;

                try {
                    String imdPath;
                    if (System.getProperty("os.name").toLowerCase().startsWith("windows")) {
                        imdPath = pathOpen;
                    } else {
                        String cwd = System.getProperty("user.dir"); // get current user directory
                        imdPath = new File(cwd).toURI().relativize(new File(pathOpen).toPath().toRealPath().toUri()).getPath(); //this is some serious java shit
                    }

                    String nsbPath = pathSave;
                    String filename = new File(nsbPath).getName();

                    try {
                        String converterPath = "converter/g3dcvtr.exe";
                        String[] cmd;
                        if (System.getProperty("os.name").toLowerCase().startsWith("windows")) {
                            if (includeNsbtx) {
                                cmd = new String[]{converterPath, imdPath, "-eboth", "-o", filename};
                            } else {
                                cmd = new String[]{converterPath, imdPath, "-emdl", "-o", filename};
                            }

                        } else {
                            if (includeNsbtx) {
                                cmd = new String[]{"wine", converterPath, imdPath, "-eboth", "-o", filename};
                            } else {
                                cmd = new String[]{"wine", converterPath, imdPath, "-emdl", "-o", filename};
                            }
                            // NOTE: wine call works only with relative path
                        }

                        if (!Files.exists(Paths.get(converterPath))) {
                            throw new IOException();
                        }

                        Process p = new ProcessBuilder(cmd).start();

                        BufferedReader stdError = new BufferedReader(new InputStreamReader(p.getErrorStream()));

                        String outputString = "";
                        String line = null;
                        while ((line = stdError.readLine()) != null) {
                            outputString += line + "\n";
                        }

                        p.waitFor();
                        p.destroy();

                        if (!filename.endsWith("nsbmd")) {
                            filename += ".nsbmd";
                        }
                        if (!nsbPath.endsWith("nsbmd")) {
                            nsbPath += ".nsbmd";
                        }

                        //System.out.println(System.getProperty("user.dir"));
                        File srcFile = new File(System.getProperty("user.dir") + File.separator + filename);
                        File dstFile = new File(nsbPath);
                        if (srcFile.exists()) {
                            try {
                                Files.move(srcFile.toPath(), dstFile.toPath(), StandardCopyOption.REPLACE_EXISTING);

                                nFilesConverted++;
                                exportStatus = ConvertStatus.SUCCESS_STATUS;

                                try {
                                    byte[] nsbmdData = Files.readAllBytes(dstFile.toPath());
                                    nsbmdModelsData.set(nFilesProcessed, nsbmdData);
                                } catch (IOException ex) {
                                    ex.printStackTrace();
                                }
                            } catch (IOException ex) {
                                nFilesNotConverted++;
                                exportStatus = ConvertStatus.MOVE_FILE_ERROR_STATUS;
                                errorMsgs.set(nFilesProcessed, "File was not moved to the save directory. \n"
                                        + "Reopen Pokemon DS Map Studio and try again.");
                            }
                        } else {
                            nFilesNotConverted++;
                            exportStatus = ConvertStatus.CONVERSION_ERROR_STATUS;
                            errorMsgs.set(nFilesProcessed, "There was a problem creating the NSBMD file. \n"
                                    + "The output from the converter is:\n"
                                    + outputString);
                        }
                    } catch (IOException ex) {
                        nFilesNotConverted++;
                        exportStatus = ConvertStatus.CONVERTER_NOT_FOUND_STATUS;
                        errorMsgs.set(nFilesProcessed,
                                "The program \"g3dcvtr.exe\" is not found in the \"converter\" folder.\n"
                                        + "Put the program and its *.dll files in the folder and try again.");
                    } catch (InterruptedException ex) {
                        nFilesNotConverted++;
                        exportStatus = ConvertStatus.INTERRUPT_ERROR_STATUS;
                        errorMsgs.set(nFilesProcessed, "The model was not converted (InterruptedException)");
                    }
                } catch (IOException ex) {
                    nFilesNotConverted++;
                    exportStatus = ConvertStatus.IMD_NOT_FOUND_ERROR_STATUS;
                    errorMsgs.set(nFilesProcessed, "Could not open IMD file");
                } catch (Exception ex) {
                    nFilesNotConverted++;
                    exportStatus = ConvertStatus.UNKNOWN_ERROR_STATUS;
                    errorMsgs.set(nFilesProcessed, "Unknown error");
                }

                tableModel.addRow(new Object[]{
                        fileName,
                        exportStatus
                });

                nFilesProcessed++;

                jlFilesProcessed.setText(nFilesProcessed + "/" + fileNames.size());
                jlFilesConverted.setText(String.valueOf(nFilesConverted));
                jlFilesNotConverted.setText(String.valueOf(nFilesNotConverted));

                jProgressBar1.setValue((nFilesProcessed * 100) / fileNames.size());
            }
        }

        if (nFilesConverted > 0) {
            jlFilesConverted.setForeground(GREEN);
        }

        if (nFilesNotConverted > 0) {
            jlFilesNotConverted.setForeground(RED);
        }

        if (nFilesNotConverted > 0) {
            jlStatus.setForeground(RED);
            jlStatus.setText("Finished with errors");

            jlResult.setForeground(RED);
            jlResult.setText(nFilesNotConverted + " IMD file(s) could not be converted into NSBMD");
        } else {
            jlStatus.setForeground(GREEN);
            jlStatus.setText("Finished");

            jlResult.setForeground(GREEN);
            jlResult.setText("All the IMD files have been converted into NSBMD");
        }

        jTable1.setRowSelectionInterval(0, 0);
        updateView(0);

        jbAccept.setEnabled(true);

        getRootPane().setDefaultButton(jbAccept);
        jbAccept.requestFocus();
    }

    public void updateView(int index) {
        try {
            CardLayout card = (CardLayout) jpCard.getLayout();
            if (nsbmdModelsData.get(index) != null) {
                card.show(jpCard, "CardDisplay");
                jTextArea1.setText("");

                nitroDisplayGL1.getObjectGL(0).setNsbmdData(nsbmdModelsData.get(index));
                nitroDisplayGL1.requestUpdate();
            } else if (errorMsgs.get(index) != null) {
                card.show(jpCard, "CardErrorInfo");
                jTextArea1.setText(errorMsgs.get(index));
            } else {
                card.show(jpCard, "CardDisplay");
                jTextArea1.setText("The NSBMD has been exported but it can't be displayed here.");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private class StatusColumnCellRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {

            //Cells are by default rendered as a JLabel.
            JLabel l = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);

            ConvertStatus status = (ConvertStatus) value;
            l.setForeground(status.color);
            l.setText(status.msg);

            Font font = l.getFont();
            font = font.deriveFont(Collections.singletonMap(TextAttribute.WEIGHT, TextAttribute.WEIGHT_BOLD));
            l.setFont(font);

            setHorizontalAlignment(JLabel.CENTER);

            //Return the JLabel which renders the cell.
            return l;
        }
    }
}
